{"version":3,"sources":["assets/images/FlagSVG.js","assets/images/ChevronSVG.js","components/MainText/MainText.js","redux/actions/types.js","redux/actions/gridActions.js","components/AlgoMenu.js","components/SpeedMenu.js","redux/actions/selectors.js","redux/reducers/gridReducer.js","redux/reducers/index.js","redux/store.js","components/Node/NodeClass.js","algorithms/WeightedAlgorithms/helperFunctions.js","algorithms/WeightedAlgorithms/astar.js","algorithms/WeightedAlgorithms/dijkstra.js","algorithms/UnweightedAlgorithms/bfs.js","redux/actions/asyncActions.js","components/utils/createAnimations.js","algorithms/UnweightedAlgorithms/dfs.js","algorithms/UnweightedAlgorithms/helperFunctions.js","components/utils/gridUtils.js","components/utils/boardControls.js","components/customHooks/useMaze.js","components/NavBar.js","components/customHooks/useAnimations.js","components/customHooks/useReset.js","components/customHooks/useClearWalls.js","components/utils/mouseHandlers.js","components/Node/Node.js","components/Grid.js","components/ModalBox/WelcomeSlide.js","components/ModalBox/FirstSlide.js","assets/gif/menudemo.gif","components/ModalBox/SecondSlide.js","assets/gif/movenode.gif","components/ModalBox/ThirdSlide.js","assets/gif/walldemo.gif","components/ModalBox/FourthSlide.js","assets/gif/mazedemo.gif","components/ModalBox/FifthSlide.js","components/ModalBox/ModalBoxContainer.js","components/AlgoExplained.js","components/PathFinder.js","components/Footer.js","App.js","index.js"],"names":["FlagSVG","color","defaultClass","size","xmlns","className","viewBox","fill","focusable","role","fillRule","clipRule","d","ChevronSVG","MainText","id","GET_GRID","SET_TOGGLE_RUNNING","CHANGE_ALGO","CHANGE_SPEED","HANDLE_MOUSE_DOWN_STARTNODE","HANDLE_MOUSE_DOWN_FINISHNODE","HANDLE_MOUSE_DOWN_WALLNODE","HANDLE_MOUSE_ENTER_FOR_CURR","HANDLE_MOUSE_ENTER_FOR_STARTNODE","HANDLE_MOUSE_ENTER_FOR_FINISHNODE","HANDLE_MOUSE_ENTER_FOR_GRID","HANDLE_MOUSE_UP","HANDLE_MOUSE_UP_FOR_STARTNODE","HANDLE_MOUSE_UP_FOR_FINISHNODE","HANDLE_MOUSE_LEAVE_FOR_STARTNODE","HANDLE_MOUSE_LEAVE_FOR_FINISHNODE","HANDLE_MOUSE_LEAVE_FOR_WALLNODE","CHANGE_NODE_TYPE","getGrid","grid","type","payload","mouseEnterAtCurr","currRow","currCol","changeRunningToggle","changeNodeColor","nodeToChange","AlgoMenu","currentAlgo","algoOptions","dispatch","useDispatch","name","onChange","e","algo","find","target","value","changeAlgo","hidden","map","SpeedMenu","speed","speedOptions","currSpeed","item","changeSpeed","selectGrid","state","selectAlgo","selectAlgoOptions","selectSpeed","selectSpeedOptions","selectStartNodeRow","START_NODE_ROW","selectStartNodeCol","START_NODE_COL","selectFinishNodeRow","FINISH_NODE_ROW","selectFinishNodeCol","FINISH_NODE_COL","selectRunning","isRunning","selectRowCount","ROW_COUNT","selectColCount","COLUMN_COUNT","initialState","mouseIsPressed","currNodeisStartNode","currNodeisFinishNode","currNodeisWallNode","nodeTypes","WALL","VISITED","SHORTEST","START","FINISH","NOCOLOR","reducer","action","row","col","gridClone","slice","rootReducer","combineReducers","gridReducer","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","NodeClass","startNodeRow","startNodeCol","finishNodeRow","finishNodeCol","nodeID","toString","defaultType","startNode","finishNode","isStart","isFinish","distance","Infinity","totalDistance","distanceToFinishNode","Math","abs","isVisited","isWall","previousNode","isNode","shortestPath","getAllNodes","allNodes","node","push","getUnvisitedNeighbors","neighbors","length","filter","neighbor","sortByDistance","unvisitedNodes","sort","nodeA","nodeB","updateUnvisitedNeighbors","unvisitedNeighbors","evaluateNextNode","nextNode","currentNode","nextNodesQueue","changeNodeColorAsync","getState","a","startApp","algorithm","nodesInOrder","generateNodesPath","animateNodesPath","visitedNodesInOrder","closestNode","shift","dijkstra","AStar","visitedNodesInOder","bfs","nextNodesStack","pop","algoName","unshift","getNeighbors","forEach","dfs","i","getNodeColor","pause","finishSearching","getNodesInShortestPathOrder","nodesInShortestPath","animateShortestPath","nodesInShortestPathOrder","toggleRunning","nodeColors","Promise","resolve","setTimeout","generateGrid","newGrid","getStartAndFinishNodes","getInitialGrid","rowCount","colCount","initialGrid","currentRow","getNewGridWithWallToggled","newNode","resetGrid","gridState","console","log","currentGrid","JSON","parse","stringify","clearWalls","createMaze","rowCountDesktop","colCountDesktop","numsOfRows","numsOfCols","wallNodes","floor","randomRow","random","randomCol","randomNode","NavBar","useSelector","handlePlayBtn","useCallback","emptyGrid","useEffect","useAnimations","handleMazeBtn","useState","mazeBtnIsClicked","setMazeBtn","useMaze","handleClearGridBtn","clearBtn","setClearGridBtn","useReset","handleClearWallsBtn","clearWallsBtn","setClearWallsBtn","gridWithNoWalls","useClearWalls","style","backgroundColor","href","onClick","preventDefault","scrollTo","padding","alert","icon","faPlay","handleMouseLeaveEvent","handleMouseUpEvent","releasedNode","mouseUpAtStartNode","mouseUpAtFinishNode","handleMouseDownEvent","isGridClear","pressedNode","mouseDownAtStartNode","mouseDownAtFinishNode","mouseDownAtWallNode","handleMouseEnterEvent","enteredNode","prevStartNode","mouseEnterAtStartNode","prevFinishNode","mouseEnterAtFinishNode","Node","nodeType","onMouseDown","onMouseEnter","onMouseUp","Grid","aGrid","onMouseLeave","rowIdx","nodeIdx","addRow","renderTable","WelcomeSlide","FirstSlide","SecondSlide","src","menudemo","alt","ThirdSlide","movenode","FourthSlide","walldemo","FifthSlide","mazedemo","ModalBox","AlgoExplained","findAlgoName","rel","PathFinder","initGrid","document","querySelector","click","faExternalLinkAlt","Footer","faGithub","faUser","faLinkedin","Date","getFullYear","fontWeight","App","ReactDOM","render","getElementById"],"mappings":"uSAkBeA,EAhBC,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,MACTC,EAAe,yCADY,EAAXC,KAGtB,OACI,qBACAC,MAAM,6BAENC,UAAYH,EACXI,QAAQ,cACTC,KAAMN,EAAO,cAAY,OAAOO,UAAU,QAAQ,cAAY,MAAM,YAAU,iBAAkBC,KAAK,MALrG,SAMI,sBAAOC,SAAS,UAAUC,SAAS,UAAUC,EAAE,86BCF5CC,EARI,WACf,OACI,qBAAKT,MAAM,6BAA6BC,UAAU,UAAUC,QAAQ,YAAYC,KAAK,eAArF,SACI,sBAAMG,SAAS,UAAUE,EAAE,qHAAqHD,SAAS,eCoCtJG,G,MApCE,WACf,OACE,qBACEC,GAAG,WACHV,UAAU,GAFZ,SAIE,qBAAIA,UAAU,aAAaU,GAAG,eAA9B,UACE,qBAAIV,UAAU,4EAAd,UACE,qBAAKA,UAAU,aAAf,SACE,cAAC,EAAD,MAFJ,gBAMA,qBAAIA,UAAU,4EAAd,UACE,qBAAKA,UAAU,cAAf,SACE,cAAC,EAAD,CAASF,KAAM,SAFnB,iBAMA,qBAAIE,UAAU,4EAAd,UACE,qBAAKA,UAAU,mBADjB,oBAGA,qBAAIA,UAAU,4EAAd,UACE,qBAAKA,UAAU,iBAAqB,qBAAKA,UAAU,kBADrD,kBAGA,qBAAIA,UAAU,4EAAd,UACE,qBAAKA,UAAU,uBADjB,wBAGA,qBAAIA,UAAU,4EAAd,UACE,qBAAKA,UAAU,cADjB,sBCjCKW,EAAW,WAEXC,EAAqB,qBAErBC,EAAc,cACdC,EAAe,eACfC,EAA8B,8BAC9BC,EAA+B,+BAC/BC,EAA6B,6BAC7BC,EAA8B,8BAC9BC,EAAmC,mCACnCC,EAAoC,oCACpCC,EAA8B,8BAC9BC,EAAkB,kBAClBC,EAAgC,gCAChCC,EAAiC,iCACjCC,EAAmC,mCACnCC,EAAoC,oCACpCC,EAAkC,kCAClCC,EAAmB,mBCGnBC,EAAU,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,MAAe,CACpCC,KAAMpB,EACNqB,QAAS,CACPF,UAuFSG,EAAmB,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,QAAZ,MAA2B,CACzDJ,KAAMb,EACNc,QAAS,CACPE,UACAC,aAISC,EAAsB,iBAAO,CACxCL,KAAMnB,IAqBKyB,EAAkB,SAAC,GAAD,IAAGC,EAAH,EAAGA,aAAc1C,EAAjB,EAAiBA,MAAOkC,EAAxB,EAAwBA,KAAxB,MAAoC,CACjEC,KAAMH,EACNI,QAAS,CACPM,eACA1C,QACAkC,UCnHWS,EA5BE,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,YACzBC,EAAWC,cAEjB,OACI,yBACE3C,UAAU,wBACV,aAAW,yBACX4C,KAAK,cACLC,SAAU,SAACC,GACT,IAAMC,EAAON,EAAYO,MAAK,SAACD,GAAD,OAAUA,EAAKhB,OAASe,EAAEG,OAAOC,SAC3DV,IAAgBO,EAAKrC,IACvBgC,EDiHc,SAAC,GAAD,IAAGF,EAAH,EAAGA,YAAH,MAAsB,CAC9CT,KAAMlB,EACNmB,QAAS,CACPQ,gBCpHiBW,CAAW,CAAEX,YAAaO,EAAKrC,OAP9C,UAWE,wBAAQ0C,QAAQ,EAAhB,8BAECX,EACGA,EAAYY,KAAI,SAACN,GAAD,OACd,wBAAsBG,MAAOH,EAAKhB,KAAlC,SACGgB,EAAKhB,MADKgB,EAAKrC,OAIpB,QCOG4C,EA9BG,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,aACpBd,EAAWC,cAEjB,OAEI,yBACE3C,UAAU,yBACV,aAAW,yBACXU,GAAG,aACHkC,KAAK,eACLC,SAAU,SAACC,GACP,IAAMW,EAAYD,EAAaR,MAAK,SAACU,GAAD,OAAUA,EAAK3B,OAASe,EAAEG,OAAOC,SACjEK,IAAUT,EAAEG,OAAOC,OACnBR,EFsHW,SAAC,GAAD,IAAGa,EAAH,EAAGA,MAAH,MAAgB,CACzCxB,KAAMjB,EACNkB,QAAS,CACPuB,UEzHqBI,CAAY,CAAEJ,MAAOE,EAAU/C,OARlD,UAYE,wBAAQ0C,QAAQ,EAAhB,0BACCI,EACGA,EAAaH,KAAI,SAACK,GAAD,OACf,wBAAsBR,MAAOQ,EAAK3B,KAAlC,SACG2B,EAAK3B,MADK2B,EAAKhD,OAIpB,mBC5BCkD,EAAa,SAACC,GAAD,OAAWA,EAAM/B,KAAKA,MACnCgC,EAAa,SAAAD,GAAK,OAAIA,EAAM/B,KAAKU,aACjCuB,EAAoB,SAAAF,GAAK,OAAIA,EAAM/B,KAAKW,aACxCuB,EAAc,SAAAH,GAAK,OAAIA,EAAM/B,KAAKyB,OAClCU,EAAqB,SAAAJ,GAAK,OAAIA,EAAM/B,KAAK0B,cACzCU,EAAqB,SAACL,GAAD,OAAWA,EAAM/B,KAAKqC,gBAC3CC,EAAqB,SAACP,GAAD,OAAWA,EAAM/B,KAAKuC,gBAC3CC,EAAsB,SAACT,GAAD,OAAWA,EAAM/B,KAAKyC,iBAC5CC,EAAsB,SAACX,GAAD,OAAWA,EAAM/B,KAAK2C,iBAC5CC,EAAgB,SAACb,GAAD,OAAWA,EAAM/B,KAAK6C,WACtCC,EAAiB,SAACf,GAAD,OAAWA,EAAM/B,KAAK+C,WACvCC,EAAiB,SAACjB,GAAD,OAAWA,EAAM/B,KAAKiD,c,qDCU9CC,GAAe,CACnBlD,KAAM,GACNU,YAAa,KACbe,MAAO,KACPY,eAAgB,EAChBI,gBAAiB,EACjBF,eAAgB,EAChBI,gBAAiB,GACjBQ,gBAAgB,EAChBJ,UAAW,GACXE,aAAc,GACdJ,WAAW,EACXO,qBAAqB,EACrBC,sBAAsB,EACtBC,oBAAoB,EACpBlD,QAAS,EACTC,QAAS,EACTM,YAAa,CACX,CAAE/B,GAAI,EAAGqB,KAAM,YACf,CAAErB,GAAI,EAAGqB,KAAM,MACf,CAAErB,GAAI,EAAGqB,KAAM,wBACf,CAAErB,GAAI,EAAGqB,KAAM,uBAEjByB,aAAc,CACZ,CAAE9C,GAAI,IAAKqB,KAAM,WACjB,CAAErB,GAAI,EAAGqB,KAAM,QACf,CAAErB,GAAI,IAAKqB,KAAM,SAEnBsD,UAAW,CACT,CAAEC,KAAM,GACR,CAAEC,QAAS,GACX,CAAEC,SAAU,GACZ,CAAEC,MAAO,GACT,CAAEC,OAAQ,GACV,CAAEC,QAAS,KAuIAC,GApIC,WAAmC,IAAlC/B,EAAiC,uDAAzBmB,GAAca,EAAW,uCAChD,OAAQA,EAAO9D,MAEb,KAAKpB,EACH,OAAO,2BACFkD,GADL,IAEE/B,KAAM+D,EAAO7D,QAAQF,OAEzB,KAAKlB,EACH,OAAO,2BACFiD,GADL,IAEEc,WAAYd,EAAMc,YAEtB,KAAK9D,EACH,OAAO,2BACFgD,GADL,IAEErB,YAAaqD,EAAO7D,QAAQQ,cAEhC,KAAK1B,EACH,OAAO,2BACF+C,GADL,IAEEN,MAAOsC,EAAO7D,QAAQuB,QAE1B,KAAK3B,EACH,MAAsCiE,EAAO7D,QAArCM,EAAR,EAAQA,aAAc1C,EAAtB,EAAsBA,MAAOkC,EAA7B,EAA6BA,KACrBgE,EAAaxD,EAAbwD,IAAKC,EAAQzD,EAARyD,IACTC,EAAYlE,EAAKmE,QAGrB,OAFAD,EAAUF,GAAKC,GAAKhE,KAAOnC,EAEpB,2BACFiE,GADL,IAEE/B,KAAMkE,IAIV,KAAKjF,EACH,OAAO,2BACF8C,GADL,IAEEoB,gBAAgB,EAChBC,qBAAqB,EACrBhD,QAAS2D,EAAO7D,QAAQE,QACxBC,QAAS0D,EAAO7D,QAAQG,UAE5B,KAAKnB,EACH,OAAO,2BACF6C,GADL,IAEEoB,gBAAgB,EAChBE,sBAAsB,EACtBjD,QAAS2D,EAAO7D,QAAQE,QACxBC,QAAS0D,EAAO7D,QAAQG,UAE5B,KAAKlB,EACH,OAAO,2BACF4C,GADL,IAEE/B,KAAM+D,EAAO7D,QAAQF,KACrBmD,gBAAgB,EAChBG,oBAAoB,EACpBlD,QAAS2D,EAAO7D,QAAQE,QACxBC,QAAS0D,EAAO7D,QAAQG,UAI5B,KAAKjB,EACH,OAAO,2BACF2C,GADL,IAEE3B,QAAS2D,EAAO7D,QAAQE,QACxBC,QAAS0D,EAAO7D,QAAQG,UAE5B,KAAKhB,EACH,OAAO,2BACF0C,GADL,IAEEM,eAAgB0B,EAAO7D,QAAQmC,eAC/BE,eAAgBwB,EAAO7D,QAAQqC,iBAEnC,KAAKjD,EACH,OAAO,2BACFyC,GADL,IAEEU,gBAAiBsB,EAAO7D,QAAQuC,gBAChCE,gBAAiBoB,EAAO7D,QAAQyC,kBAEpC,KAAKpD,EACH,OAAO,2BACFwC,GADL,IAEE/B,KAAM+D,EAAO7D,QAAQF,OAIzB,KAAKR,EACH,OAAO,2BACFuC,GADL,IAEEoB,gBAAgB,IAEpB,KAAK1D,EACH,OAAO,2BACFsC,GADL,IAEEqB,qBAAsBrB,EAAMqB,oBAC5Bf,eAAgB0B,EAAO7D,QAAQmC,eAC/BE,eAAgBwB,EAAO7D,QAAQqC,iBAEnC,KAAK7C,EACH,OAAO,2BACFqC,GADL,IAEEsB,sBAAuBtB,EAAMsB,qBAC7BZ,gBAAiBsB,EAAO7D,QAAQuC,gBAChCE,gBAAiBoB,EAAO7D,QAAQyC,kBAIpC,KAAKhD,EACH,OAAO,2BACFoC,GADL,IAEEqB,qBAAsBrB,EAAMqB,oBAC5BD,gBAAgB,IAGpB,KAAKvD,EACH,OAAO,2BACFmC,GADL,IAEEsB,sBAAuBtB,EAAMsB,qBAC7BF,gBAAgB,IAEpB,KAAKtD,EACH,OAAO,2BACFkC,GADL,IAEEuB,oBAAqBvB,EAAMuB,mBAC3BH,gBAAgB,IAEpB,QACE,OAAOpB,ICpLEqC,GAHKC,YAAgB,CAChCrE,KAAMsE,KCAJC,GAAkBC,OAAOC,sCAAwCC,IAIxDC,GAFDC,YAAYR,GAAaG,GAAgBM,YAAgBC,OCN1DC,GAAY,SAACf,EAAKC,EAAKe,EAAcC,EAAcC,EAAeC,GAC7E,IAAMC,EAAUpB,EAAIqB,WAAapB,EAAIoB,WACjCC,EAAc,KACdC,GAAY,EACZC,GAAa,EAUjB,OATIxB,IAAQgB,GAAgBf,IAAQgB,IAClCK,EAAc,EACdC,GAAY,GAEVvB,IAAQkB,GAAiBjB,IAAQkB,IACnCG,EAAc,EACdE,GAAa,GAGR,CACH5G,GAAKwG,EACLpB,MACAC,MACAhE,KAAOqF,EACPG,QAASF,EACTG,SAAUF,EACVG,SAAUC,IACVC,cAAeD,IACfE,qBACEC,KAAKC,IAAId,EAAgBlB,GAAO+B,KAAKC,IAAIb,EAAgBlB,GAC3DgC,WAAW,EACXC,QAAQ,EACRC,aAAc,KACdC,QAAQ,EACRC,cAAc,I,2BC5BPC,GAAc,SAACtG,GAC1B,IADmC,EAC/BuG,EAAW,GADoB,cAEjBvG,GAFiB,IAEnC,2BAAwB,CAAC,IAAD,EAAbgE,EAAa,sBACHA,GADG,IACtB,2BAAwB,CAAC,IAAdwC,EAAa,QACtBD,EAASE,KAAKD,IAFM,gCAFW,8BAOnC,OAAOD,GAGIG,GAAwB,SAACF,EAAMxG,GAC1C,IAAI2G,EAAY,GACR1C,EAAauC,EAAbvC,IAAKD,EAAQwC,EAARxC,IAKb,OAJIA,EAAM,GAAG2C,EAAUF,KAAKzG,EAAKgE,EAAM,GAAGC,IACtCD,EAAMhE,EAAK4G,OAAS,GAAGD,EAAUF,KAAKzG,EAAKgE,EAAM,GAAGC,IACpDA,EAAM,GAAG0C,EAAUF,KAAKzG,EAAKgE,GAAKC,EAAM,IACxCA,EAAMjE,EAAK,GAAG4G,OAAS,GAAGD,EAAUF,KAAKzG,EAAKgE,GAAKC,EAAM,IACtD0C,EAAUE,QAAO,SAACC,GAAD,OAAeA,EAASb,cCM5Cc,GAAiB,SAACC,GACtBA,EAAeC,MAAK,SAASC,EAAOC,GAClC,OAAID,EAAMrB,gBAAkBsB,EAAMtB,cACzBqB,EAAMpB,qBAAuBqB,EAAMrB,qBAErCoB,EAAMrB,cAAgBsB,EAAMtB,kBAIjCuB,GAA2B,SAACZ,EAAMxG,GACtC,IAD+C,EACzCqH,EAAqBX,GAAsBF,EAAMxG,GADR,cAIxBqH,GAJwB,IAI/C,2BAA2C,CAAC,IAAjCP,EAAgC,QACnCnB,EAAWa,EAAKb,SAAW,EAC7BA,EAAWmB,EAASnB,WACtBmB,EAASnB,SAAWA,EACpBmB,EAASjB,cAAgBiB,EAASnB,SAAWmB,EAAShB,qBACtDgB,EAASX,aAAeK,IATmB,gCCV3CY,GAA2B,SAACZ,EAAMxG,GACtC,IAD+C,EACzCqH,EAAqBX,GAAsBF,EAAMxG,GADR,cAExBqH,GAFwB,IAE/C,2BAA2C,CAAC,IAAjCP,EAAgC,QACzCA,EAASnB,SAAWa,EAAKb,SAAW,EACpCmB,EAASX,aAAeK,GAJqB,gCAQ3CO,GAAiB,SAACC,GACtBA,EAAeC,MAAK,SAASC,EAAOC,GAClC,OAAOD,EAAMvB,SAAWwB,EAAMxB,aCU5B2B,GAAmB,SAACC,EAAUC,EAAaC,GAC1CF,EAAStB,YACZsB,EAASpB,aAAeqB,EACxBC,EAAehB,KAAKc,KC5CXG,GAAuB,SAAClH,EAAc1C,GAAf,gDAAyB,WAAO8C,EAAU+G,GAAjB,gBAAAC,EAAA,sDACjD5H,EAAS2H,IAAW3H,KAApBA,KACRY,EAASL,EAAgB,CAAEC,eAAc1C,QAAOkC,UAFS,2CAAzB,yDCQvB6H,GAAQ,yCAAG,WAAO7H,EAAM8H,EAAWvC,EAAWC,EAAY/D,GAA/C,gBAAAmG,EAAA,6DAChBG,EAAeC,GAAkBhI,EAAM8H,EAAWvC,EAAWC,GAD7C,SAEhByC,GAAiBF,EAAcvC,EAAY/D,GAF3B,2CAAH,8DAKRuG,GAAoB,SAAChI,EAAM8H,EAAWvC,EAAWC,GAC5D,IAAI0C,EAaJ,MAZuB,aAAnBJ,EAAU7H,OACViI,EHdkB,SAAClI,EAAMuF,EAAWC,GACxC,IAAI0C,EAAsB,GAC1B3C,EAAUI,SAAW,EAGrB,IAFA,IAAMqB,EAAiBV,GAAYtG,GAE5BgH,EAAeJ,QAAQ,CAC5BG,GAAeC,GACf,IAAMmB,EAAcnB,EAAeoB,QACnC,IAAKD,EAAYjC,OAAQ,CACvB,GAAIiC,EAAYxC,WAAaC,IAAU,OAAOsC,EAI9C,GAFAC,EAAYlC,WAAY,EACxBiC,EAAoBzB,KAAK0B,GACrBA,IAAgB3C,EAAY,OAAO0C,EACrCd,GAAyBe,EAAanI,KGAlBqI,CAASrI,EAAMuF,EAAWC,IAE7B,OAAnBsC,EAAU7H,OACViI,EJjBe,SAAClI,EAAMuF,EAAWC,GACrC,IAAI0C,EAAsB,GAC1B3C,EAAUI,SAAW,EACrBJ,EAAUM,cAAgB,EAE1B,IADA,IAAImB,EAAiBV,GAAYtG,GAC1BgH,EAAeJ,QAAQ,CAC5BG,GAAeC,GACf,IAAMmB,EAAcnB,EAAeoB,QACnC,IAAKD,EAAYjC,OAAQ,CACvB,GAAIiC,EAAYxC,WAAaC,IAAU,OAAOsC,EAI9C,GAHAC,EAAYlC,WAAY,EACxBiC,EAAoBzB,KAAK0B,GAErBA,IAAgB3C,EAAY,OAAO0C,EAEvCd,GAAyBe,EAAanI,KIEhBsI,CAAMtI,EAAMuF,EAAWC,IAE1B,yBAAnBsC,EAAU7H,OACViI,EFxBa,SAAClI,EAAMuF,EAAWC,GAInC,IAHA,IAAI+C,EAAqB,GACrBd,EAAiB,CAAClC,GAEfkC,EAAeb,QAAQ,CAC5B,IAAMY,EAAcC,EAAeW,QACnC,GAAIZ,IAAgBhC,EAAY,OAAO+C,EAEvC,IACGf,EAAYtB,SACZsB,EAAY/B,UAAY+B,EAAYvB,WACrC,CACAuB,EAAYvB,WAAY,EACxBsC,EAAmB9B,KAAKe,GACxB,IAAQvD,EAAauD,EAAbvD,IAAKD,EAAQwD,EAARxD,IACTuD,OAAQ,EACRvD,EAAM,IACRuD,EAAWvH,EAAKgE,EAAM,GAAGC,GACzBqD,GAAiBC,EAAUC,EAAaC,IAEtCzD,EAAMhE,EAAK4G,OAAS,IACtBW,EAAWvH,EAAKgE,EAAM,GAAGC,GACzBqD,GAAiBC,EAAUC,EAAaC,IAEtCxD,EAAM,IACRsD,EAAWvH,EAAKgE,GAAKC,EAAM,GAC3BqD,GAAiBC,EAAUC,EAAaC,IAEtCxD,EAAMjE,EAAK,GAAG4G,OAAS,IACzBW,EAAWvH,EAAKgE,GAAKC,EAAM,GAC3BqD,GAAiBC,EAAUC,EAAaC,MENpBe,CAAIxI,EAAMuF,EAAWC,IAExB,uBAAnBsC,EAAU7H,OACViI,EC1Ba,SAAClI,EAAMuF,EAAWC,GAInC,IAHA,IAAI0C,EAAsB,GACtBO,EAAiB,CAAClD,GAF4B,aAKhD,IAAMiC,EAAciB,EAAeC,MAEnC,GAAIlB,IAAgBhC,EAAY,MAAM,CAAN,EAAO0C,GACvC,IACGV,EAAYtB,SACZsB,EAAY/B,UAAY+B,EAAYvB,WACrC,CACAuB,EAAYvB,WAAY,EACxBiC,EAAoBzB,KAAKe,GAEzB,IAAQvD,EAAauD,EAAbvD,IAAKD,EAAQwD,EAARxD,KChBS,SAAChE,EAAMgE,EAAKC,EAAK0E,GACzC,IAAIpB,EACAZ,EAAY,GAwBhB,OAvBI3G,EAAKgE,EAAM,IAAMhE,EAAKgE,EAAI,GAAGC,KAC/BsD,EAAWvH,EAAKgE,EAAM,GAAGC,GACR,QAAb0E,EAAoBhC,EAAUiC,QAAQrB,GACpB,QAAboB,GAAoBhC,EAAUF,KAAKc,IAG1CvH,EAAKgE,GAAKC,EAAI,KAChBsD,EAAWvH,EAAKgE,GAAKC,EAAI,GACR,QAAb0E,EAAoBhC,EAAUiC,QAAQrB,GACpB,QAAboB,GAAoBhC,EAAUF,KAAKc,IAG1CvH,EAAKgE,EAAI,IAAMhE,EAAKgE,EAAI,GAAGC,KAC7BsD,EAAWvH,EAAKgE,EAAI,GAAGC,GACN,QAAb0E,EAAoBhC,EAAUiC,QAAQrB,GACpB,QAAboB,GAAoBhC,EAAUF,KAAKc,IAG1CvH,EAAKgE,GAAKC,EAAI,KAChBsD,EAAWvH,EAAKgE,GAAKC,EAAI,GACzB0C,EAAUiC,QAAQrB,IAGbZ,GDTakC,CAAa7I,EAAKgE,EAAKC,EAAK,OACpC6E,SAAQ,SAAAhC,GACXA,EAASb,YACZa,EAASX,aAAeqB,EACxBiB,EAAehC,KAAKK,SAhBrB2B,EAAe7B,QAAQ,CAAC,IAAD,yCDsBJmC,CAAI/I,EAAMuF,EAAWC,IAExC0C,GAGFD,GAAgB,yCAAG,WAAOC,EAAqB1C,EAAY/D,GAAxC,kBAAAmG,EAAA,sDACfoB,EAAI,EADW,YACRA,EAAId,EAAoBtB,QADhB,uBAElBY,EAAcU,EAAoBc,IACpBvD,SAAW+B,EAAY9B,UAAY8B,EAAYtB,SAC/DsB,EAAYvB,WAAY,EACxBtB,GAAM/D,SAAS8G,GAAqBF,EAAayB,GAAa,cAL1C,SAOhBC,GAAMzH,GAPU,OACwBuH,IADxB,uCASlBE,GAAM,IAAMzH,GATM,QAUxB0H,GAAgB3D,GAVQ,4CAAH,0DAajB2D,GAAe,yCAAG,WAAO3D,GAAP,gBAAAoC,EAAA,sEACYwB,GAA4B5D,GADxC,cAChB6D,EADgB,gBAEhBC,GAAoBD,GAFJ,2CAAH,sDAQfD,GAA2B,yCAAG,WAAO5D,GAAP,kBAAAoC,EAAA,sDAGlC,IAFMyB,EAAsB,GACxB7B,EAAchC,EACK,OAAhBgC,GACL6B,EAAoBT,QAAQpB,GAC5BA,EAAcA,EAAYrB,aALM,yBAO3BkD,GAP2B,2CAAH,sDAUpBC,GAAmB,yCAAG,WAAOC,GAAP,kBAAA3B,EAAA,sDACxBoB,EAAI,EADoB,YACjBA,EAAIO,EAAyB3C,QADZ,uBAEzBJ,EAAO+C,EAAyBP,IAC5B9C,QAAWM,EAAKf,SAAYe,EAAKd,WACzCc,EAAKH,cAAe,EACpB1B,GAAM/D,SAAS8G,GAAqBlB,EAAMyC,GAAa,eAL1B,SAOzBC,GAAM,IAPmB,OACoBF,IADpB,sBASjCQ,KATiC,4CAAH,sDAYnBP,GAAe,SAACnL,GAC3B,IAAM2L,EAAa9B,KAAWpE,UAC9B,MAAc,SAAVzF,EAAyB2L,EAAW,GAAGjG,KAC7B,YAAV1F,EAA4B2L,EAAW,GAAGhG,QAChC,aAAV3F,EAA6B2L,EAAW,GAAG/F,SACjC,UAAV5F,EAA0B2L,EAAW,GAAG9F,MAC9B,WAAV7F,EAA2B2L,EAAW,GAAG7F,OAC/B,YAAV9F,EAA4B2L,EAAW,GAAG5F,aAA9C,GAGWqF,GAAK,yCAAG,WAAOzH,GAAP,UAAAmG,EAAA,+EACZ,IAAI8B,SAAQ,SAACC,GAClBC,YAAW,WACTD,MACClI,OAJc,2CAAH,sDGhFLkG,GAAW,WACtB,OAAOhD,GAAMgD,WAAW3H,MAGbwJ,GAAgB,WAC3B7E,GAAM/D,SAASN,MAGJuJ,GAAe,SAACC,GAC3BnF,GAAM/D,SAASb,EAAQ,CAAEC,KAAM8J,MAGpBC,GAAyB,WACpC,MAKIpC,KAEJ,MAAO,CACL3C,aARF,EACE3C,eAQA4C,aATF,EAEE1C,eAQA2C,cAVF,EAGEzC,gBAQA0C,cAXF,EAIExC,kBAWSqH,GAAiB,SAACC,EAAUC,GAGvC,IAFA,MAAqEH,KAA7D/E,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,aAAcC,EAApC,EAAoCA,cAAeC,EAAnD,EAAmDA,cAC/CgF,EAAc,GACTnG,EAAM,EAAGA,EAAMiG,EAAUjG,IAAO,CAEvC,IADA,IAAMoG,EAAa,GACVnG,EAAM,EAAGA,EAAMiG,EAAUjG,IAChCmG,EAAW3D,KACT1B,GACEf,EACAC,EACAe,EACAC,EACAC,EACAC,IAINgF,EAAY1D,KAAK2D,GAEnB,OAAOD,GAGIE,GAA4B,SAACrG,EAAKC,GAC7C,IACM6F,EADWnC,KAAT3H,KACamE,QACfqC,EAAOsD,EAAQ9F,GAAKC,GAC1B,IAAKuC,EAAKf,UAAYe,EAAKd,SAAU,CACnC,IAAI4E,EAAO,2BACN9D,GADM,IAETN,QAASM,EAAKN,SAEhB4D,EAAQ9F,GAAKC,GAAOqG,GACa,IAA7BR,EAAQ9F,GAAKC,GAAKiC,OACpB4D,EAAQ9F,GAAKC,GAAKhE,KAAOgJ,GAAa,QAEtCa,EAAQ9F,GAAKC,GAAKhE,KAAOgJ,GAAa,WAG1C,OAAOa,GC1DIS,GAAY,SAACC,GACxB,IAAK7C,KAAW9E,UAAW,CACzB4H,QAAQC,IAAI,cAMZ,IALA,MAAoC/C,KAA5B5E,EAAR,EAAQA,UAAWE,EAAnB,EAAmBA,aACf0H,EAAcC,KAAKC,MAAMD,KAAKE,UAAUN,IAC5C,EAAqET,KAA7D/E,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,aAAcC,EAApC,EAAoCA,cAAeC,EAAnD,EAAmDA,cAE/C2E,EAAU,GACL9F,EAAM,EAAGA,EAAMjB,EAAWiB,IAAO,CAExC,IADA,IAAMoG,EAAa,GACVnG,EAAM,EAAGA,EAAMhB,EAAcgB,IAAO,CAC3C,IAAIqG,EAAUvF,GACZf,EACAC,EACAe,EACAC,EACAC,EACAC,GAEFmF,EAAQpE,OAASyE,EAAY3G,GAAKC,GAAKiC,OACvCkE,EAAW3D,KAAK6D,GACZA,EAAQpE,SACVoE,EAAQrK,KAAOgJ,GAAa,SAGhCa,EAAQrD,KAAK2D,GAEf,OAAON,IAIEiB,GAAa,SAAC/K,GACzB,IAAQ6C,EAAc8E,KAAd9E,UACJiH,EAAU9J,EAAKmE,QACnB,IAAKtB,EAAW,CAAC,IAAD,gBACIiH,GADJ,IACd,2BAA2B,CAAC,IAAD,EAAhB9F,EAAgB,sBACNA,GADM,IACzB,2BAAwB,CAAC,IAAdwC,EAAa,SACF,IAAhBA,EAAKN,SACPM,EAAKN,QAAS,EACdM,EAAKvG,KAAOgJ,GAAa,aAJJ,gCADb,8BASd,OAAOa,I,SCjBLkB,GAAa,SAACC,EAAiBC,GAOnC,IANA,IAAIC,EAAaF,EACbG,EAAaF,EAEbG,EAAY,GAEZrL,EAAOgK,GAAemB,EAAYC,GAC7BpC,EAAI,EAAGA,EAAIjD,KAAKuF,MAJZ,GAI2BH,GAAanC,IAAK,CACxD,IAAMuC,EAAYxF,KAAKuF,MAAMvF,KAAKyF,UAAYL,EAAa,IACrDM,EAAY1F,KAAKuF,MAAMvF,KAAKyF,UAAYJ,EAAa,IACvDM,EAAa1L,EAAKuL,GAAWE,GAC5BC,EAAWjG,SAAYiG,EAAWhG,WACrCgG,EAAWxF,QAAS,EACpBwF,EAAWzL,KAAOgJ,GAAa,QAC/BoC,EAAU5E,KAAKiF,IAGnB,OAAO1L,GCmEM2L,GAzGA,SAAC,GAAc,IAAZ3L,EAAW,EAAXA,KACVU,EAAckL,YAAY5J,GAC1BrB,EAAciL,YAAY3J,GAC1BR,EAAQmK,YAAY1J,GACpBR,EAAekK,YAAYzJ,GAC3B0J,ECNqB,WAC3B,IAAMjL,EAAWC,cACXgC,EAAY+I,YAAYhJ,GACxB5C,EAAO4L,YAAY9J,GACnBpB,EAAckL,YAAY5J,GAC1BP,EAAQmK,YAAY1J,GACpBvB,EAAciL,YAAY3J,GAC1BI,EAAiBuJ,YAAYxJ,GAC7BG,EAAiBqJ,YAAYtJ,GAC7BG,EAAkBmJ,YAAYpJ,GAC9BG,EAAkBiJ,YAAYlJ,GAE9BmJ,EAAgBC,uBAAY,SAAC9L,GACjC,IAAK6C,EAAW,CACd,IAAMkJ,EAAYxB,GAAUvK,GAC5BY,EAASb,EAAQ,CAACC,KAAM+L,KACxBnL,EAASN,QAEV,CAACM,IAYJ,OAVAoL,qBAAU,WACR,GAAInJ,EAAW,CACb,IAAM0C,EAAYvF,EAAKqC,GAAgBE,GACjCiD,EAAaxF,EAAKyC,GAAiBE,GACnCmF,EAAYnH,EAAYO,MAAK,SAACD,GAAD,OAAUA,EAAKrC,KAAO8B,KACnDwD,EAAS,YAAOlE,GACtB6H,GAAS3D,EAAW4D,EAAWvC,EAAWC,EAAY/D,MAEvD,CAACoB,IAEGgJ,EDxBeI,GACdC,EDba,WACrB,IAAMtL,EAAWC,cACXgC,EAAY+I,YAAYhJ,GACxBqI,EAAkBW,YAAY9I,GAC9BoI,EAAkBU,YAAY5I,GAEpC,EAAuCmJ,oBAAS,GAAhD,oBAAOC,EAAP,KAAyBC,EAAzB,KAEMH,EAAgBJ,uBAAY,WAChC,IAAKjJ,EAAW,CACdwJ,GAAW,GACX,IAAMvC,EAAUkB,GAAWC,EAAiBC,GAC5CtK,EAASb,EAAQ,CAAEC,KAAM8J,QAE1B,CAAClJ,IAOJ,OALAoL,qBAAU,WACRvB,QAAQC,IAAI,iBACR0B,GAAkBC,GAAW,KAChC,CAACD,IAEG,CACLA,mBACAC,aACAH,iBCXwBI,GAAlBJ,cACAK,EEnBc,WACtB,IAAM3L,EAAWC,cACXgC,EAAY+I,YAAYhJ,GAC9B,EAAoCuJ,oBAAS,GAA7C,oBAAOK,EAAP,KAAiBC,EAAjB,KAEMF,EAAqBT,uBACzB,SAAC9L,GACC,IAAK6C,EAAW,CACd4J,GAAgB,GAChB,IAAMV,EAAYxB,GAAUvK,GAC5BY,EAASb,EAAQ,CAAEC,KAAM+L,QAG7B,CAACnL,IAQH,OALAoL,qBAAU,WACRvB,QAAQC,IAAI,aACR8B,GAAUC,GAAgB,KAC7B,CAACD,IAEG,CACLA,WACAC,kBACAF,sBFL6BG,GAAvBH,mBACAI,EGpBmB,WAC3B,IAAM/L,EAAWC,cACXgC,EAAY+I,YAAYhJ,GAC9B,EAA0CuJ,oBAAS,GAAnD,oBAAOS,EAAP,KAAsBC,EAAtB,KAEMF,EAAsBb,uBAAY,SAAC9L,GACvC,IAAK6C,EAAW,CACdgK,GAAiB,GACjB,IAAMC,EAAkB/B,GAAW/K,GACnCY,EAASb,EAAQ,CAACC,KAAM8M,QAEzB,CAAClM,IASJ,OAPAoL,qBAAU,WAERvB,QAAQC,IAAI,oBACRkC,GAAeC,GAAiB,KAEnC,CAACD,IAEG,CACLA,gBACAC,mBACAF,uBHH8BI,GAAxBJ,oBACR,OACE,sBACEzO,UAAU,iDACVU,GAAG,eACHoO,MAAO,CAAEC,gBAAiB,WAH5B,UAKE,oBACE/O,UAAU,oBACVgP,KAAK,IACLC,QAAS,SAACnM,GACRA,EAAEoM,iBACF5I,OAAO6I,SAAS,EAAG,IALvB,UAQG,IACD,cAAC,EAAD,CAASvP,MAAO,QAASE,KAAM,OAC/B,mBAAGgP,MAAO,CAAEM,QAAS,QAArB,2BAGF,wBACEpP,UAAU,sBACVU,GAAG,iBACHqB,KAAK,SACL,iBAAe,WACf,iBAAe,kBACf,gBAAc,iBACd,gBAAc,QACd,aAAW,oBARb,SAUE,sBAAM/B,UAAU,0BAGlB,qBAAKA,UAAU,+BAA+BU,GAAG,iBAAjD,SACE,qBAAIV,UAAU,kCAAd,UAEE,oBAAIA,UAAU,sBAAd,SACE,wBACI+B,KAAK,SACL/B,UAAU,kBACViP,QAAS,WACPjB,KAJN,2BAUF,oBAAIhO,UAAU,sBAAd,SACE,cAAC,EAAD,CAAUwC,YAAaA,EAAaC,YAAaA,MAGnD,oBAAIzC,UAAU,sBAAd,SACE,cAAC,EAAD,CAAWuD,MAAOA,EAAOC,aAAcA,MAGzC,oBAAIxD,UAAU,gBAAd,SACE,yBACE+B,KAAK,SACL/B,UAAU,iBACViP,QAAS,WACa,OAAhBzM,GAAkC,OAAVe,EAC1B8L,MAAM,wCACH1B,EAAc7L,IANvB,UAQG,IACD,cAAC,IAAD,CAAiBwN,KAAMC,IAAQzP,KAAK,YAIxC,oBAAIE,UAAU,eAAd,SACE,wBACE+B,KAAK,SACL/B,UAAU,iBACViP,QAAS,kBACPZ,EAAmBvM,IAJvB,0BAWF,oBAAI9B,UAAU,eAAd,SACE,wBACE+B,KAAK,SACL/B,UAAU,iBACViP,QAAS,kBAAMR,EAAoB3M,IAHrC,oCIlFC0N,GAAwB,WAEnC,MAAoC/F,KAA5B5E,EAAR,EAAQA,UAAWE,EAAnB,EAAmBA,aACnB,EAA0E0E,KAAlEvE,EAAR,EAAQA,oBAAqBC,EAA7B,EAA6BA,qBAAsBC,EAAnD,EAAmDA,mBAC/CF,EACFuB,GAAM/D,SvBkBkC,CAC1CX,KAAMN,IuBlBK0D,EACTsB,GAAM/D,SvBoBmC,CAC3CX,KAAML,IuBpBK0D,IACTqB,GAAM/D,SvBsBiC,CACzCX,KAAMJ,IuBtBJmK,GAAejH,EAAWE,KAIjB0K,GAAqB,SAAC3J,EAAKC,GAEtC,MAAuE0D,KAA/D9E,EAAR,EAAQA,UAAW7C,EAAnB,EAAmBA,KAAMoD,EAAzB,EAAyBA,oBAAqBC,EAA9C,EAA8CA,qBAE9C,IAAKR,EAAW,CACd,MAAoC8E,KAA5B5E,EAAR,EAAQA,UAAWE,EAAnB,EAAmBA,aACnB0B,GAAM/D,SvBjB0B,CAClCX,KAAMT,IuBiBJ,IAAMoO,EAAe5N,EAAKgE,GAAKC,GAE3Bb,GACFuB,GAAM/D,SvBjBsB,SAAC,GAAD,IAAGyB,EAAH,EAAGA,eAAgBE,EAAnB,EAAmBA,eAAnB,MAAyC,CACzEtC,KAAMR,EACNS,QAAS,CACPmC,iBACAE,mBuBaiBsL,CAAmB,CAAExL,eAAgB2B,EAAKzB,eAAgB0B,KACzEU,GAAM/D,SAAS8G,GAAqBkG,EAAc3E,GAAa,YAEtD5F,IACTsB,GAAM/D,SvBbuB,SAAC,GAAD,IAAG6B,EAAH,EAAGA,gBAAiBE,EAApB,EAAoBA,gBAApB,MAA2C,CAC5E1C,KAAMP,EACNQ,QAAS,CACPuC,kBACAE,oBuBSkBmL,CAAoB,CAAErL,gBAAiBuB,EAAKrB,gBAAiBsB,KAC7EU,GAAM/D,SAAS8G,GAAqBkG,EAAc3E,GAAa,aAGjEe,GAAejH,EAAWE,KAIjB8K,GAAuB,SAAC/J,EAAKC,GAExC,MAA4B0D,KAApB9E,EAAR,EAAQA,UAAW7C,EAAnB,EAAmBA,KACnB,IAAK6C,GN7DoB,SAAC7C,GAAU,IAAD,gBACjBA,GADiB,IACnC,2BAAwB,CAAC,IAAD,EAAbgE,EAAa,sBACHA,GADG,IACtB,2BAAwB,CAAC,IAAdwC,EAAa,QACtB,IAAMA,EAAKP,WAAcO,EAAKH,aAAe,OAAO,GAFhC,gCADW,8BAMnC,OAAO,EMyDD2H,CAAYhO,GAAO,CACrB,IAAMiO,EAAcjO,EAAKgE,GAAKC,GAC9B,GAAIgK,EAAYxI,QACdd,GAAM/D,SvBTsB,SAAC,GAAD,IAAGR,EAAH,EAAGA,QAASC,EAAZ,EAAYA,QAAZ,MAA2B,CAC7DJ,KAAMhB,EACNiB,QAAS,CACPE,UACAC,YuBKmB6N,CAAqB,CAAE9N,QAAS4D,EAAK3D,QAAS4D,UAExD,GAAIgK,EAAYvI,SACrBf,GAAM/D,SvBJuB,SAAC,GAAD,IAAGR,EAAH,EAAGA,QAASC,EAAZ,EAAYA,QAAZ,MAA2B,CAC9DJ,KAAMf,EACNgB,QAAS,CACPE,UACAC,YuBAmB8N,CAAsB,CAAE/N,QAAS4D,EAAK3D,QAAS4D,SAEzD,CACL,IAAM6F,EAAUO,GAA0BrG,EAAKC,GAC/CU,GAAM/D,SvBAqB,SAAC,GAAD,IAAGZ,EAAH,EAAGA,KAAMI,EAAT,EAASA,QAASC,EAAlB,EAAkBA,QAAlB,MAAiC,CAClEJ,KAAMd,EACNe,QAAS,CACPF,OACAI,UACAC,YuBLmB+N,CAAoB,CAC/BpO,KAAM8J,EACN1J,QAAS4D,EACT3D,QAAS4D,QAORoK,GAAwB,SAACrK,EAAKC,GAEzC,MASI0D,KARF9E,EADF,EACEA,UACAM,EAFF,EAEEA,eACAG,EAHF,EAGEA,mBACAF,EAJF,EAIEA,oBACAC,EALF,EAKEA,qBACArD,EANF,EAMEA,KACAI,EAPF,EAOEA,QACAC,EARF,EAQEA,QAGF,IAAKwC,GACCM,EAAgB,CAClB,IAAImL,EAActO,EAAKgE,GAAKC,GAE5B,GAAIb,EAAqB,CAEvB,IAA2B,IAAvBkL,EAAYpI,OAAkB,CAChC,IAAIqI,EAAgBvO,EAAKI,GAASC,GAClCkO,EAAc9I,SAAU,EACxBd,GAAM/D,SAAS8G,GAAqB6G,EAAetF,GAAa,aAChEtE,GAAM/D,SAAST,EAAiB,CAAEC,QAAS4D,EAAK3D,QAAS4D,KAEzDqK,EAAY7I,SAAU,EACtBd,GAAM/D,SAAS8G,GAAqB4G,EAAarF,GAAa,WAEhEtE,GAAM/D,SvB7BuB,SAAC,GAAD,IAAGyB,EAAH,EAAGA,eAAgBE,EAAnB,EAAmBA,eAAnB,MAAyC,CAC5EtC,KAAMZ,EACNa,QAAS,CACPmC,iBACAE,mBuByBmBiM,CAAsB,CAAEnM,eAAgB2B,EAAKzB,eAAgB0B,KAC5EU,GAAM/D,SAAS8G,GAAqB4G,EAAarF,GAAa,gBAEzD,GAAI5F,EAAsB,CAE/B,IAA2B,IAAvBiL,EAAYpI,OAAkB,CAChC,IAAIuI,EAAiBzO,EAAKI,GAASC,GACnCoO,EAAe/I,UAAW,EAC1Bf,GAAM/D,SAAST,EAAiB,CAAEC,QAAS4D,EAAK3D,QAAS4D,KACzDU,GAAM/D,SAAS8G,GAAqB+G,EAAgBxF,GAAa,aAEjEqF,EAAY5I,UAAW,EACvBf,GAAM/D,SAAS8G,GAAqB4G,EAAarF,GAAa,YAEhEtE,GAAM/D,SvBnCwB,SAAC,GAAD,IACpC6B,EADoC,EACpCA,gBACAE,EAFoC,EAEpCA,gBAFoC,MAG/B,CACL1C,KAAMX,EACNY,QAAS,CACPuC,kBACAE,oBuB4BoB+L,CAAuB,CAAEjM,gBAAiBuB,EAAKrB,gBAAiBsB,KAChFU,GAAM/D,SAAS8G,GAAqB4G,EAAarF,GAAa,iBAEzD,GAAI3F,EAAoB,CAE7B,IAAMwG,EAAUO,GAA0BrG,EAAKC,GAC/C4F,GAAaC,MCrGN6E,I,MA/BF,SAAC,GAQP,IAEiBC,EATtBhQ,EAOI,EAPJA,GACAqF,EAMI,EANJA,IACAD,EAKI,EALJA,IACA/D,EAII,EAJJA,KACA4O,EAGI,EAHJA,YACAC,EAEI,EAFJA,aACAC,EACI,EADJA,UAYA,OACE,oBAEEnQ,GAAE,eAAUoF,EAAV,YAAiBC,GACnB/F,UAAS,gBAbS0Q,EAac3O,EAZjB,IAAb2O,EAAuB,OACV,IAAbA,EAAwB,UACX,IAAbA,EAAwB,gBACX,IAAbA,EAAwB,QACX,IAAbA,EAAuB,SACf,MAQVC,YAAa,kBAAMA,EAAY7K,EAAKC,IACpC6K,aAAc,kBAAMA,EAAa9K,EAAKC,IACtC8K,UAAW,kBAAMA,EAAU/K,EAAKC,KAL3BrF,KCgCIoQ,GAhDF,SAAC,GAAc,IAAZhP,EAAW,EAAXA,KAqChB,OACI,mCACKA,EAAK4G,OAAS,EACX,qBAAK1I,UAAU,YAAf,SApBQ,SAAC+Q,GACjB,IAAM/K,EAAY0G,KAAKC,MAAMD,KAAKE,UAAUmE,IAC5C,OACI,wBACA/Q,UAAU,kCACVgR,aAAc,kBAAMxB,MAFpB,UAGI,sCACA,gCACKxJ,EAAU3C,KAAI,SAACyC,EAAKmL,GACjB,OA3BH,SAAC,GAAqB,IAAnBnL,EAAkB,EAAlBA,IAAKmL,EAAa,EAAbA,OACrB,OACI,6BACKnL,EAAIzC,KAAI,SAACiF,EAAM4I,GACZ,IAAQxQ,EAAuB4H,EAAvB5H,GAAIqF,EAAmBuC,EAAnBvC,IAAKD,EAAcwC,EAAdxC,IAAK/D,EAASuG,EAATvG,KACtB,OAAQ,cAAC,GAAD,CACJrB,GAAIA,EACJqF,IAAKA,EACLD,IAAKA,EACL/D,KAAMA,EACN4O,YAAad,GACbe,aAAcT,GACdU,UAAWpB,SAVdwB,GAyBUE,CAAO,CAACrL,MAAKmL,mBAYvBG,CAAYtP,KAEjB,QChDCuP,I,MAAe,WAC1B,OACE,qBACErR,UAAU,aACVU,GAAG,eACH,cAAY,OACZ,kBAAgB,0BAJlB,SAME,qBAAKV,UAAU,qCAAf,SACE,sBAAKA,UAAU,iBAAf,UACE,sBAAKA,UAAU,eAAf,UACE,qBAAIA,UAAU,eAAeU,GAAG,0BAAhC,mCACyB,IACvB,cAAC,EAAD,CAASd,MAAO,OAAQE,KAAM,UAEhC,wBACEiC,KAAK,SACL/B,UAAU,YACV,kBAAgB,QAChB,aAAW,aAGf,qBAAKA,UAAU,aAAf,SACE,oBAAGA,UAAU,aAAb,0JAG6C,8CAH7C,sCAI4B,qCAJ5B,SASF,sBAAKA,UAAU,eAAf,UACE,wBAAQA,UAAU,iBAAiB,kBAAgB,QAAnD,2BAIA,wBACEA,UAAU,kBACV,iBAAe,gBACf,iBAAe,QACf,kBAAgB,QAJlB,8BCtCCsR,GAAa,WACxB,OACE,qBACEtR,UAAU,aACVU,GAAG,eACH,cAAY,OACZ,kBAAgB,0BAJlB,SAME,qBAAKV,UAAU,qCAAf,SACE,sBAAKA,UAAU,iBAAf,UACE,sBAAKA,UAAU,eAAf,UACE,oBAAIA,UAAU,eAAeU,GAAG,0BAAhC,8CAGA,wBACEqB,KAAK,SACL/B,UAAU,YACV,kBAAgB,QAChB,aAAW,aAGf,qBAAKA,UAAU,aAAf,SACE,oBAAGA,UAAU,aAAb,UACG,IACD,oBAAGgP,KAAK,4CAAR,UACE,sDAA6B,OAHjC,2QAYF,qBAAKhP,UAAU,eAAf,SACE,wBACEA,UAAU,kBACV,iBAAe,gBACf,iBAAe,QACf,kBAAgB,QAJlB,4BCrCG,OAA0B,qCCE5BuR,GAAc,WACzB,OACE,qBACEvR,UAAU,aACVU,GAAG,eACH,cAAY,OACZ,kBAAgB,2BAJlB,SAME,qBAAKV,UAAU,qCAAf,SACE,sBAAKA,UAAU,gBAAf,UACE,sBAAKA,UAAU,eAAf,UACE,oBAAIA,UAAU,cAAcU,GAAG,2BAA/B,+BAGA,wBACEqB,KAAK,SACL/B,UAAU,YACV,kBAAgB,QAChB,aAAW,aAGf,sBAAKA,UAAU,aAAf,UACE,mBAAGA,UAAU,aAAb,uSAOA,qBACEA,UAAU,YACVwR,IAAKC,GACLC,IAAI,2BAGR,sBAAK1R,UAAU,eAAf,UACE,wBACEA,UAAU,kBACV,iBAAe,gBACf,iBAAe,QACf,kBAAgB,QAJlB,kBAQA,wBACEA,UAAU,kBACV,iBAAe,gBACf,iBAAe,QACf,kBAAgB,QAJlB,6BC9CG,OAA0B,qCCG5B2R,GAAa,WACxB,OACE,qBACE3R,UAAU,aACVU,GAAG,eACH,cAAY,OACZ,kBAAgB,2BAJlB,SAME,qBAAKV,UAAU,qCAAf,SACE,sBAAKA,UAAU,gBAAf,UACE,sBAAKA,UAAU,eAAf,UACE,oBAAIA,UAAU,cAAcU,GAAG,2BAA/B,sCAGA,wBACEqB,KAAK,SACL/B,UAAU,YACV,kBAAgB,QAChB,aAAW,aAGf,qBAAKA,UAAU,aAAf,SACE,gCACE,mBAAGA,UAAU,aAAb,iEAGA,qBAAKA,UAAU,YAAYwR,IAAKI,GAAUF,IAAI,oBAIlD,sBAAK1R,UAAU,eAAf,UACE,wBACEA,UAAU,kBACV,iBAAe,gBACf,iBAAe,QACf,kBAAgB,QAJlB,kBAQA,wBACEA,UAAU,kBACV,iBAAe,gBACf,iBAAe,QACf,kBAAgB,QAJlB,6BC1CG,OAA0B,qCCG5B6R,GAAc,WACzB,OACE,qBACE7R,UAAU,aACVU,GAAG,eACH,cAAY,OACZ,kBAAgB,2BAJlB,SAME,qBAAKV,UAAU,qCAAf,SACE,sBAAKA,UAAU,gBAAf,UACE,sBAAKA,UAAU,eAAf,UACE,oBAAIA,UAAU,cAAcU,GAAG,2BAA/B,uBAGA,wBACEqB,KAAK,SACL/B,UAAU,YACV,kBAAgB,QAChB,aAAW,aAIf,sBAAKA,UAAU,aAAf,UACE,gCACE,mBAAGA,UAAU,aAAb,mIAIA,qBAAKA,UAAU,YAAYwR,IAAKM,GAAUJ,IAAI,oBAEhD,0BAGF,sBAAK1R,UAAU,eAAf,UACE,wBACEA,UAAU,kBACV,iBAAe,gBACf,iBAAe,QACf,kBAAgB,QAJlB,kBAQA,wBACEA,UAAU,kBACV,iBAAe,gBACf,iBAAe,QACf,kBAAgB,QAJlB,6BC7CG,OAA0B,qCCG5B+R,GAAa,WACxB,OACE,qBACE/R,UAAU,aACVU,GAAG,eACH,cAAY,OACZ,kBAAgB,2BAJlB,SAME,qBAAKV,UAAU,qCAAf,SACE,sBAAKA,UAAU,gBAAf,UACE,sBAAKA,UAAU,eAAf,UACE,oBAAIA,UAAU,cAAcU,GAAG,2BAA/B,2BAGA,wBACEqB,KAAK,SACL/B,UAAU,YACV,kBAAgB,QAChB,aAAW,aAGf,sBAAKA,UAAU,aAAf,UACE,gCACE,mBAAGA,UAAU,aAAb,uDAGA,qBAAKA,UAAU,YAAYwR,IAAKQ,GAAUN,IAAI,oBAEhD,0BAGF,sBAAK1R,UAAU,eAAf,UACE,wBACEA,UAAU,kBACV,iBAAe,gBACf,iBAAe,QACf,kBAAgB,QAJlB,kBAQA,wBACEA,UAAU,iBACV,kBAAgB,QAFlB,8BCnCCiS,GAAW,WAEtB,OACE,gCACE,cAAC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,QChBOC,GAAgB,SAAC,GAAkC,IAAhC1P,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,YACnC0P,EAAe,WACjB,OAAoB,OAAhB3P,EAA6B,eACrBC,EAAYO,MAAK,SAACD,GAAD,OAAUA,EAAKrC,KAAO8B,KAAaT,MAWpE,OACI,mBAAGiN,KARoB,aAAnBmD,IAAqC,uDACb,OAAnBA,IAA+B,oDACZ,yBAAnBA,IAA+C,qDAC5B,uBAAnBA,IAA+C,mDAC7C,IAIUlP,OAAO,SAASmP,IAAI,sBAAsBpS,UAAU,cAAzE,SACKmS,OC4DEE,GAzDI,WACjB,IAAM3P,EAAWC,cACXb,EAAO4L,YAAY9J,GACnBmI,EAAW2B,YAAY9I,GACvBoH,EAAW0B,YAAY5I,GACvBtC,EAAckL,YAAY5J,GAC1BrB,EAAciL,YAAY3J,GAE5BuO,EAAWxG,GAAeC,EAAUC,GAOxC,OANA8B,qBAAU,WACRvB,QAAQC,IAAI,gBACZ9J,EAASb,EAAQ,CAAEC,KAAMwQ,KACzBC,SAASC,cAAc,oCAAoCC,UAC1D,IAGD,sBAAKzS,UAAU,UAAf,UACE,cAAC,GAAD,IACC8B,EAAK4G,OAAS,EAAI,cAAC,GAAD,CAAQ5G,KAAMA,IAAW,KAC5C,qBAAK9B,UAAU,uBAAf,SACE,qBAAIA,UAAU,sBAAsBU,GAAG,oBAAvC,UACE,qBAAIV,UAAU,MAAd,UACE,wBACEA,UAAU,6BACVU,GAAG,cACH,iBAAe,QACf,iBAAe,gBAJjB,qCAQA,cAAC,GAAD,OAGF,oBAAIV,UAAU,MAAd,SACE,yBACEA,UAAU,6BACVU,GAAG,mBAFL,UAKE,4BACE,cAAC,GAAD,CACE8B,YAAaA,EACbC,YAAaA,MAEZ,IAVP,aAWa,IACX,cAAC,IAAD,CAAiB6M,KAAMoD,gBAK9B5Q,EAAK4G,OAAS,EAAI,cAAC,GAAD,CAAM5G,KAAMA,IAAW,KAC1C,cAAC,EAAD,Q,iBCjBS6Q,GApDA,WACb,OACE,yBACE3S,UAAU,qCACV8O,MAAO,CAAEC,gBAAiB,uBAF5B,UAIE,qBAAK/O,UAAU,qBAAf,SACE,oCACE,mBACEA,UAAU,wCACVgP,KAAK,4BACL5O,KAAK,SACL6C,OAAO,SAASmP,IAAI,sBAJtB,SAME,cAAC,IAAD,CAAiB9C,KAAMsD,SAGzB,mBACE5S,UAAU,wCACVgP,KAAK,KACL5O,KAAK,SACL6C,OAAO,SAASmP,IAAI,sBAJtB,SAME,cAAC,IAAD,CAAiB9C,KAAMuD,QAGzB,mBACE7S,UAAU,wCACVgP,KAAK,+CACL5O,KAAK,SACL6C,OAAO,SAASmP,IAAI,sBAJtB,SAME,cAAC,IAAD,CAAiB9C,KAAMwD,cAI7B,sBAAK9S,UAAU,cAAcU,GAAG,aAAhC,mBACU,IAAIqS,MAAOC,cADrB,yBAC0D,IACxD,sBAAMlE,MAAO,CAAElP,MAAO,WAAtB,oBACA,mBACEI,UAAU,WACV8O,MAAO,CAAEmE,WAAY,OACrBjE,KAAK,kDACL/L,OAAO,SAASmP,IAAI,sBAJtB,gCC9BOc,OATf,WACE,OACE,sBAAKlT,UAAU,MAAf,UACE,cAAC,GAAD,IACA,cAAC,GAAD,QCANmT,IAASC,OACP,cAAC,IAAD,CAAU3M,MAAOA,GAAjB,SACE,cAAC,GAAD,MAEF8L,SAASc,eAAe,W","file":"static/js/main.11d55a62.chunk.js","sourcesContent":["import React from 'react'\n\nconst FlagSVG = ({ color, size }) => {\n    const defaultClass = \"svg-inline--fa fa-flag-checkered fa-w-\" + size\n    \n    return (\n        <svg \n        xmlns=\"http://www.w3.org/2000/svg\" \n        // className= \"svg-inline--fa fa-flag-checkered fa-w-16\" \n        className= {defaultClass}\n         viewBox=\"0 0 512 512\" \n        fill={color} aria-hidden=\"true\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"flag-checkered\"  role=\"img\" >\n            <path  fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M243.2 189.9V258c26.1 5.9 49.3 15.6 73.6 22.3v-68.2c-26-5.8-49.4-15.5-73.6-22.2zm223.3-123c-34.3 15.9-76.5 31.9-117 31.9C296 98.8 251.7 64 184.3 64c-25 0-47.3 4.4-68 12 2.8-7.3 4.1-15.2 3.6-23.6C118.1 24 94.8 1.2 66.3 0 34.3-1.3 8 24.3 8 56c0 19 9.5 35.8 24 45.9V488c0 13.3 10.7 24 24 24h16c13.3 0 24-10.7 24-24v-94.4c28.3-12.1 63.6-22.1 114.4-22.1 53.6 0 97.8 34.8 165.2 34.8 48.2 0 86.7-16.3 122.5-40.9 8.7-6 13.8-15.8 13.8-26.4V95.9c.1-23.3-24.2-38.8-45.4-29zM169.6 325.5c-25.8 2.7-50 8.2-73.6 16.6v-70.5c26.2-9.3 47.5-15 73.6-17.4zM464 191c-23.6 9.8-46.3 19.5-73.6 23.9V286c24.8-3.4 51.4-11.8 73.6-26v70.5c-25.1 16.1-48.5 24.7-73.6 27.1V286c-27 3.7-47.9 1.5-73.6-5.6v67.4c-23.9-7.4-47.3-16.7-73.6-21.3V258c-19.7-4.4-40.8-6.8-73.6-3.8v-70c-22.4 3.1-44.6 10.2-73.6 20.9v-70.5c33.2-12.2 50.1-19.8 73.6-22v71.6c27-3.7 48.4-1.3 73.6 5.7v-67.4c23.7 7.4 47.2 16.7 73.6 21.3v68.4c23.7 5.3 47.6 6.9 73.6 2.7V143c27-4.8 52.3-13.6 73.6-22.5z\">\n            </path>\n            </svg>\n    )\n}\n\nexport default FlagSVG\n","import React from 'react'\n\nconst ChevronSVG = () => {\n    return (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n            <path fillRule=\"evenodd\" d=\"M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z\" clipRule=\"evenodd\" />\n        </svg>\n    )\n}\n\nexport default ChevronSVG\n","import React from \"react\";\nimport FlagSVG from \"../../assets/images/FlagSVG\";\nimport ChevronSVG from \"../../assets/images/ChevronSVG\";\nimport \"./MainText.css\";\n\nconst MainText = () => {\n  return (\n    <div\n      id=\"mainText\"\n      className=\"\"\n    >\n      <ul className=\"list-group\" id=\"mainTextList\">\n        <li className=\"list-group-item border-0 d-flex justify-content-center align-items-center\">\n          <div className=\"start me-1\">\n            <ChevronSVG />\n          </div>\n          Start Node\n        </li>\n        <li className=\"list-group-item border-0 d-flex justify-content-center align-items-center\">\n          <div className=\"target me-1\">\n            <FlagSVG size={\"16\"}/>\n          </div>\n          Target Node\n        </li>\n        <li className=\"list-group-item border-0 d-flex justify-content-center align-items-center\">\n          <div className=\"unvisited me-1\"></div>Unvisited Node\n        </li>\n        <li className=\"list-group-item border-0 d-flex justify-content-center align-items-center\">\n          <div className=\"visited me-1\"></div><div className=\"visited2 me-1\"></div>Visited Node\n        </li>\n        <li className=\"list-group-item border-0 d-flex justify-content-center align-items-center\">\n          <div className=\"shortest-path me-1\"></div>Shortest-path Node\n        </li>\n        <li className=\"list-group-item border-0 d-flex justify-content-center align-items-center\">\n          <div className=\"wall me-1\"></div>Wall Node\n        </li>\n      </ul>\n    </div>\n  );\n};\n\nexport default MainText;\n","export const GET_GRID = 'GET_GRID'\nexport const GRID_WITH_WALLS = 'GRID_WITH_WALLS'\nexport const SET_TOGGLE_RUNNING = 'SET_TOGGLE_RUNNING'\nexport const TOGGLE_VIEW = 'TOGGLE_VIEW'\nexport const CHANGE_ALGO = 'CHANGE_ALGO'\nexport const CHANGE_SPEED = 'CHANGE_SPEED'\nexport const HANDLE_MOUSE_DOWN_STARTNODE = 'HANDLE_MOUSE_DOWN_STARTNODE'\nexport const HANDLE_MOUSE_DOWN_FINISHNODE = 'HANDLE_MOUSE_DOWN_FINISHNODE'\nexport const HANDLE_MOUSE_DOWN_WALLNODE = 'HANDLE_MOUSE_DOWN_WALLNODE'\nexport const HANDLE_MOUSE_ENTER_FOR_CURR = 'HANDLE_MOUSE_ENTER_FOR_CURR'\nexport const HANDLE_MOUSE_ENTER_FOR_STARTNODE = 'HANDLE_MOUSE_ENTER_FOR_STARTNODE'\nexport const HANDLE_MOUSE_ENTER_FOR_FINISHNODE = 'HANDLE_MOUSE_ENTER_FOR_FINISHNODE'\nexport const HANDLE_MOUSE_ENTER_FOR_GRID = 'HANDLE_MOUSE_ENTER_FOR_GRID'\nexport const HANDLE_MOUSE_UP = 'HANDLE_MOUSE_UP'\nexport const HANDLE_MOUSE_UP_FOR_STARTNODE = 'HANDLE_MOUSE_UP_FOR_STARTNODE'\nexport const HANDLE_MOUSE_UP_FOR_FINISHNODE = 'HANDLE_MOUSE_UP_FOR_FINISHNODE'\nexport const HANDLE_MOUSE_LEAVE_FOR_STARTNODE = 'HANDLE_MOUSE_LEAVE_FOR_STARTNODE'\nexport const HANDLE_MOUSE_LEAVE_FOR_FINISHNODE = 'HANDLE_MOUSE_LEAVE_FOR_FINISHNODE'\nexport const HANDLE_MOUSE_LEAVE_FOR_WALLNODE = 'HANDLE_MOUSE_LEAVE_FOR_WALLNODE'\nexport const CHANGE_NODE_TYPE = \"CHANGE_NODE_TYPE\"","import {\n  GET_GRID,\n  SET_TOGGLE_RUNNING,\n  CHANGE_ALGO,\n  CHANGE_SPEED,\n  TOGGLE_VIEW,\n  HANDLE_MOUSE_DOWN_STARTNODE,\n  HANDLE_MOUSE_DOWN_FINISHNODE,\n  HANDLE_MOUSE_DOWN_WALLNODE,\n  HANDLE_MOUSE_ENTER_FOR_CURR,\n  HANDLE_MOUSE_ENTER_FOR_STARTNODE,\n  HANDLE_MOUSE_ENTER_FOR_FINISHNODE,\n  HANDLE_MOUSE_ENTER_FOR_GRID,\n  HANDLE_MOUSE_UP,\n  HANDLE_MOUSE_UP_FOR_STARTNODE,\n  HANDLE_MOUSE_UP_FOR_FINISHNODE,\n  HANDLE_MOUSE_LEAVE_FOR_STARTNODE,\n  HANDLE_MOUSE_LEAVE_FOR_FINISHNODE,\n  HANDLE_MOUSE_LEAVE_FOR_WALLNODE,\n  CHANGE_NODE_TYPE,\n} from \"./types\";\n\nexport const getGrid = ({ grid }) => ({\n  type: GET_GRID,\n  payload: {\n    grid,\n  },\n});\n\nexport const handleMouseUp = () => ({\n  type: HANDLE_MOUSE_UP,\n});\n\nexport const mouseUpAtStartNode = ({ START_NODE_ROW, START_NODE_COL }) => ({\n  type: HANDLE_MOUSE_UP_FOR_STARTNODE,\n  payload: {\n    START_NODE_ROW,\n    START_NODE_COL,\n  },\n});\n\nexport const mouseUpAtFinishNode = ({ FINISH_NODE_ROW, FINISH_NODE_COL }) => ({\n  type: HANDLE_MOUSE_UP_FOR_FINISHNODE,\n  payload: {\n    FINISH_NODE_ROW,\n    FINISH_NODE_COL,\n  },\n});\n\nexport const mouseLeaveAtStartNode = () => ({\n  type: HANDLE_MOUSE_LEAVE_FOR_STARTNODE,\n});\n\nexport const mouseLeaveAtFinishNode = () => ({\n  type: HANDLE_MOUSE_LEAVE_FOR_FINISHNODE,\n});\n\nexport const mouseLeaveAtWallNode = () => ({\n  type: HANDLE_MOUSE_LEAVE_FOR_WALLNODE,\n});\n\nexport const mouseDownAtStartNode = ({ currRow, currCol }) => ({\n  type: HANDLE_MOUSE_DOWN_STARTNODE,\n  payload: {\n    currRow,\n    currCol,\n  },\n});\n\nexport const mouseDownAtFinishNode = ({ currRow, currCol }) => ({\n  type: HANDLE_MOUSE_DOWN_FINISHNODE,\n  payload: {\n    currRow,\n    currCol,\n  },\n});\n\nexport const mouseDownAtWallNode = ({ grid, currRow, currCol }) => ({\n  type: HANDLE_MOUSE_DOWN_WALLNODE,\n  payload: {\n    grid,\n    currRow,\n    currCol,\n  },\n});\n\nexport const mouseEnterAtStartNode = ({ START_NODE_ROW, START_NODE_COL }) => ({\n  type: HANDLE_MOUSE_ENTER_FOR_STARTNODE,\n  payload: {\n    START_NODE_ROW,\n    START_NODE_COL,\n  },\n});\n\nexport const mouseEnterAtFinishNode = ({\n  FINISH_NODE_ROW,\n  FINISH_NODE_COL,\n}) => ({\n  type: HANDLE_MOUSE_ENTER_FOR_FINISHNODE,\n  payload: {\n    FINISH_NODE_ROW,\n    FINISH_NODE_COL,\n  },\n});\n\nexport const mouseEnterAtGrid = ({ grid }) => ({\n  type: HANDLE_MOUSE_ENTER_FOR_GRID,\n  payload: {\n    grid,\n  },\n});\n\nexport const mouseEnterAtCurr = ({ currRow, currCol }) => ({\n  type: HANDLE_MOUSE_ENTER_FOR_CURR,\n  payload: {\n    currRow,\n    currCol,\n  },\n});\n\nexport const changeRunningToggle = () => ({\n  type: SET_TOGGLE_RUNNING,\n});\n\nexport const changeView = () => ({\n  type: TOGGLE_VIEW,\n});\n\nexport const changeAlgo = ({ currentAlgo }) => ({\n  type: CHANGE_ALGO,\n  payload: {\n    currentAlgo,\n  },\n});\n\nexport const changeSpeed = ({ speed }) => ({\n  type: CHANGE_SPEED,\n  payload: {\n    speed,\n  },\n});\n\nexport const changeNodeColor = ({ nodeToChange, color, grid }) => ({\n  type: CHANGE_NODE_TYPE,\n  payload: {\n    nodeToChange,\n    color,\n    grid,\n  },\n});\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { changeAlgo } from \"../redux/actions/gridActions\";\n\nconst AlgoMenu = ({ currentAlgo, algoOptions }) => {\n  const dispatch = useDispatch();\n\n  return (\n      <select\n        className=\"form-select algo-menu\"\n        aria-label=\"Default select example\"\n        name=\"ALGO_OPTION\"\n        onChange={(e) => {\n          const algo = algoOptions.find((algo) => algo.type === e.target.value);\n          if (currentAlgo !== algo.id) {\n            dispatch(changeAlgo({ currentAlgo: algo.id }));\n          }\n        }}\n      >\n        <option hidden={true}>Choose algorithm</option>\n\n        {algoOptions\n          ? algoOptions.map((algo) => (\n              <option key={algo.id} value={algo.type}>\n                {algo.type}\n              </option>\n            ))\n          : \" \"}\n      </select>\n  );\n};\n\nexport default AlgoMenu;\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { changeSpeed } from \"../redux/actions/gridActions\";\n\nconst SpeedMenu = ({ speed, speedOptions }) => {\n  const dispatch = useDispatch();\n   \n  return (\n    \n      <select\n        className=\"form-select speed-menu\"\n        aria-label=\"Default select example\"\n        id=\"speed-menu\"\n        name=\"SPEED_OPTION\"\n        onChange={(e) => {\n            const currSpeed = speedOptions.find((item) => item.type === e.target.value);\n            if (speed !== e.target.value) {\n                dispatch(changeSpeed({ speed: currSpeed.id }));\n            }\n        }}\n      >\n        <option hidden={true}>Choose speed</option>\n        {speedOptions\n          ? speedOptions.map((item) => (\n              <option key={item.id} value={item.type}>\n                {item.type}\n              </option>\n            ))\n          : \"Loading menu\"}\n      </select>\n\n  );\n};\n\nexport default SpeedMenu;\n","export const selectGrid = (state) => state.grid.grid;\nexport const selectAlgo = state => state.grid.currentAlgo\nexport const selectAlgoOptions = state => state.grid.algoOptions\nexport const selectSpeed = state => state.grid.speed  \nexport const selectSpeedOptions = state => state.grid.speedOptions  \nexport const selectStartNodeRow = (state) => state.grid.START_NODE_ROW;\nexport const selectStartNodeCol = (state) => state.grid.START_NODE_COL\nexport const selectFinishNodeRow = (state) => state.grid.FINISH_NODE_ROW\nexport const selectFinishNodeCol = (state) => state.grid.FINISH_NODE_COL\nexport const selectRunning = (state) => state.grid.isRunning\nexport const selectRowCount = (state) => state.grid.ROW_COUNT;\nexport const selectColCount = (state) => state.grid.COLUMN_COUNT;\n","import {\n  GET_GRID,\n  SET_TOGGLE_RUNNING,\n  CHANGE_ALGO,\n  CHANGE_SPEED,\n  HANDLE_MOUSE_DOWN_STARTNODE,\n  HANDLE_MOUSE_DOWN_FINISHNODE,\n  HANDLE_MOUSE_DOWN_WALLNODE,\n  HANDLE_MOUSE_ENTER_FOR_CURR,\n  HANDLE_MOUSE_ENTER_FOR_STARTNODE,\n  HANDLE_MOUSE_ENTER_FOR_FINISHNODE,\n  HANDLE_MOUSE_ENTER_FOR_GRID,\n  HANDLE_MOUSE_UP,\n  HANDLE_MOUSE_UP_FOR_STARTNODE,\n  HANDLE_MOUSE_UP_FOR_FINISHNODE,\n  HANDLE_MOUSE_LEAVE_FOR_STARTNODE,\n  HANDLE_MOUSE_LEAVE_FOR_FINISHNODE,\n  HANDLE_MOUSE_LEAVE_FOR_WALLNODE,\n  CHANGE_NODE_TYPE,\n} from \"../actions/types\";\n\nconst initialState = {\n  grid: [],\n  currentAlgo: null,\n  speed: null,\n  START_NODE_ROW: 5,\n  FINISH_NODE_ROW: 7,\n  START_NODE_COL: 5,\n  FINISH_NODE_COL: 16,\n  mouseIsPressed: false,\n  ROW_COUNT: 25,\n  COLUMN_COUNT: 35,\n  isRunning: false,\n  currNodeisStartNode: false,\n  currNodeisFinishNode: false,\n  currNodeisWallNode: false,\n  currRow: 0,\n  currCol: 0,\n  algoOptions: [\n    { id: 1, type: \"Dijkstra\" },\n    { id: 2, type: \"A*\" },\n    { id: 3, type: \"Breadth First Search\" },\n    { id: 4, type: \"Depth First Search\" },\n  ],\n  speedOptions: [\n    { id: 100, type: \"Average\" },\n    { id: 5, type: \"Fast\" },\n    { id: 200, type: \"Slow\" },\n  ],\n  nodeTypes: [\n    { WALL: 0 },\n    { VISITED: 1 },\n    { SHORTEST: 2 },\n    { START: 3 },\n    { FINISH: 4 },\n    { NOCOLOR: 5 },\n  ],\n};\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    //app init\n    case GET_GRID:\n      return {\n        ...state,\n        grid: action.payload.grid,\n      };\n    case SET_TOGGLE_RUNNING:\n      return {\n        ...state,\n        isRunning: !state.isRunning,\n      };\n    case CHANGE_ALGO:\n      return {\n        ...state,\n        currentAlgo: action.payload.currentAlgo,\n      };\n    case CHANGE_SPEED:\n      return {\n        ...state,\n        speed: action.payload.speed,\n      };\n    case CHANGE_NODE_TYPE:\n      const { nodeToChange, color, grid } = action.payload;\n      const { row, col } = nodeToChange;\n      let gridClone = grid.slice();\n      gridClone[row][col].type = color;\n\n      return {\n        ...state,\n        grid: gridClone,\n      };\n\n    //handle mouse down event\n    case HANDLE_MOUSE_DOWN_STARTNODE:\n      return {\n        ...state,\n        mouseIsPressed: true,\n        currNodeisStartNode: true,\n        currRow: action.payload.currRow,\n        currCol: action.payload.currCol,\n      };\n    case HANDLE_MOUSE_DOWN_FINISHNODE:\n      return {\n        ...state,\n        mouseIsPressed: true,\n        currNodeisFinishNode: true,\n        currRow: action.payload.currRow,\n        currCol: action.payload.currCol,\n      };\n    case HANDLE_MOUSE_DOWN_WALLNODE:\n      return {\n        ...state,\n        grid: action.payload.grid,\n        mouseIsPressed: true,\n        currNodeisWallNode: true,\n        currRow: action.payload.currRow,\n        currCol: action.payload.currCol,\n      };\n\n    //handle mouse enter events\n    case HANDLE_MOUSE_ENTER_FOR_CURR:\n      return {\n        ...state,\n        currRow: action.payload.currRow,\n        currCol: action.payload.currCol,\n      };\n    case HANDLE_MOUSE_ENTER_FOR_STARTNODE:\n      return {\n        ...state,\n        START_NODE_ROW: action.payload.START_NODE_ROW,\n        START_NODE_COL: action.payload.START_NODE_COL,\n      };\n    case HANDLE_MOUSE_ENTER_FOR_FINISHNODE:\n      return {\n        ...state,\n        FINISH_NODE_ROW: action.payload.FINISH_NODE_ROW,\n        FINISH_NODE_COL: action.payload.FINISH_NODE_COL,\n      };\n    case HANDLE_MOUSE_ENTER_FOR_GRID:\n      return {\n        ...state,\n        grid: action.payload.grid,\n      };\n\n    //handle mouse up events\n    case HANDLE_MOUSE_UP:\n      return {\n        ...state,\n        mouseIsPressed: false,\n      };\n    case HANDLE_MOUSE_UP_FOR_STARTNODE:\n      return {\n        ...state,\n        currNodeisStartNode: !state.currNodeisStartNode,\n        START_NODE_ROW: action.payload.START_NODE_ROW,\n        START_NODE_COL: action.payload.START_NODE_COL,\n      };\n    case HANDLE_MOUSE_UP_FOR_FINISHNODE:\n      return {\n        ...state,\n        currNodeisFinishNode: !state.currNodeisFinishNode,\n        FINISH_NODE_ROW: action.payload.FINISH_NODE_ROW,\n        FINISH_NODE_COL: action.payload.FINISH_NODE_COL,\n      };\n\n    //handle mouse leave event\n    case HANDLE_MOUSE_LEAVE_FOR_STARTNODE:\n      return {\n        ...state,\n        currNodeisStartNode: !state.currNodeisStartNode,\n        mouseIsPressed: false,\n      };\n\n    case HANDLE_MOUSE_LEAVE_FOR_FINISHNODE:\n      return {\n        ...state,\n        currNodeisFinishNode: !state.currNodeisFinishNode,\n        mouseIsPressed: false,\n      };\n    case HANDLE_MOUSE_LEAVE_FOR_WALLNODE:\n      return {\n        ...state,\n        currNodeisWallNode: !state.currNodeisWallNode,\n        mouseIsPressed: false,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { combineReducers } from 'redux';\nimport  gridReducer from './gridReducer';\n\nconst rootReducer = combineReducers({\n    grid: gridReducer,\n})\nexport default rootReducer","import {createStore, compose, applyMiddleware} from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers'\n\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(rootReducer, composeEnhancer(applyMiddleware(thunk)))\n\nexport default store","export const NodeClass = (row, col, startNodeRow, startNodeCol, finishNodeRow, finishNodeCol ) => {\n  const nodeID = (row.toString() + col.toString())\n  let defaultType = null;\n  let startNode = false;\n  let finishNode = false;\n  if (row === startNodeRow && col === startNodeCol) {\n    defaultType = 3;\n    startNode = true; \n  }\n  if (row === finishNodeRow && col === finishNodeCol) {\n    defaultType = 4;\n    finishNode = true;\n  }\n\n  return {\n      id: (nodeID),\n      row,\n      col,\n      type : defaultType,\n      isStart: startNode,\n      isFinish: finishNode,\n      distance: Infinity,\n      totalDistance: Infinity,\n      distanceToFinishNode:\n        Math.abs(finishNodeRow - row) + Math.abs(finishNodeCol - col),\n      isVisited: false,\n      isWall: false,\n      previousNode: null,\n      isNode: true,\n      shortestPath: false,\n    };\n  };","//shared functions between A* and Dijkstra Algos\nexport const getAllNodes = (grid) => {\n  let allNodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      allNodes.push(node);\n    }\n  }\n  return allNodes;\n}; \n\nexport const getUnvisitedNeighbors = (node, grid) => {\n  let neighbors = [];\n  const { col, row } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter((neighbor) => !neighbor.isVisited);\n};\n\n ","import { getAllNodes,\n  getUnvisitedNeighbors,\n} from './helperFunctions'\n\nexport const AStar = (grid, startNode, finishNode) => {\n  let visitedNodesInOrder = [];\n  startNode.distance = 0;\n  startNode.totalDistance = 0;\n  let unvisitedNodes = getAllNodes(grid);\n  while (unvisitedNodes.length) {\n    sortByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n    if (!closestNode.isWall) {\n      if (closestNode.distance === Infinity) return visitedNodesInOrder;\n      closestNode.isVisited = true;\n      visitedNodesInOrder.push(closestNode);\n\n      if (closestNode === finishNode) return visitedNodesInOrder;\n\n      updateUnvisitedNeighbors(closestNode, grid);\n    }\n  }\n};\n\nconst sortByDistance = (unvisitedNodes) => {\n  unvisitedNodes.sort(function(nodeA, nodeB) {\n    if (nodeA.totalDistance === nodeB.totalDistance) {\n      return nodeA.distanceToFinishNode - nodeB.distanceToFinishNode\n    }\n    return nodeA.totalDistance - nodeB.totalDistance\n  }); \n};\n\nconst updateUnvisitedNeighbors = (node, grid) => {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  // console.log(\"---\")\n  // console.log(node.col + \":\" + node.row + \" - \" + node.totalDistance)\n  for (const neighbor of unvisitedNeighbors) {\n    const distance = node.distance + 1;\n    if (distance < neighbor.distance) {\n      neighbor.distance = distance; //A Star has 2 cost function: f(x) = g(x) + h(x) : g(x) is cost to reach a node x, h(x) is cost from node X to goal node aka heuristic function.\n      neighbor.totalDistance = neighbor.distance + neighbor.distanceToFinishNode;\n      neighbor.previousNode = node;\n    }\n    // console.log(neighbor.col + \":\" + neighbor.row + \" - \" + neighbor.totalDistance)\n  }\n};","import { getAllNodes,\n  getUnvisitedNeighbors, \n} from './helperFunctions'\n\nexport const dijkstra = (grid, startNode, finishNode) => {\n  let visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n\n  while (unvisitedNodes.length) {\n    sortByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n    if (!closestNode.isWall) {\n      if (closestNode.distance === Infinity) return visitedNodesInOrder;\n      \n      closestNode.isVisited = true;\n      visitedNodesInOrder.push(closestNode);\n      if (closestNode === finishNode) return visitedNodesInOrder;\n        updateUnvisitedNeighbors(closestNode, grid);\n    }\n  }\n};\n\nconst updateUnvisitedNeighbors = (node, grid) => {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1; //dijkstra has one cost function aka real cost from source to each node : f(x) = g(x)\n    neighbor.previousNode = node;\n  }\n};\n\nconst sortByDistance = (unvisitedNodes) => {\n  unvisitedNodes.sort(function(nodeA, nodeB) {\n    return nodeA.distance - nodeB.distance\n  }); \n};","export const bfs = (grid, startNode, finishNode) => {\n  let visitedNodesInOder = [];\n  let nextNodesQueue = [startNode]; //initialize queue with startNode\n\n  while (nextNodesQueue.length) {\n    const currentNode = nextNodesQueue.shift();\n    if (currentNode === finishNode) return visitedNodesInOder;\n\n    if (\n      !currentNode.isWall &&\n      (currentNode.isStart || !currentNode.isVisited)\n    ) {\n      currentNode.isVisited = true;\n      visitedNodesInOder.push(currentNode);\n      const { col, row } = currentNode;\n      let nextNode;\n      if (row > 0) {\n        nextNode = grid[row - 1][col];\n        evaluateNextNode(nextNode, currentNode, nextNodesQueue);\n      }\n      if (row < grid.length - 1) {\n        nextNode = grid[row + 1][col];\n        evaluateNextNode(nextNode, currentNode, nextNodesQueue);\n      }\n      if (col > 0) {\n        nextNode = grid[row][col - 1];\n        evaluateNextNode(nextNode, currentNode, nextNodesQueue);\n      }\n      if (col < grid[0].length - 1) {\n        nextNode = grid[row][col + 1];\n        evaluateNextNode(nextNode, currentNode, nextNodesQueue);\n      }\n      // const neighbors = getNeighbors(grid,row, col, 'bfs')\n      // neighbors.forEach(neighbor => {\n      //   if (!neighbor.isVisited) {\n      //     neighbor.previousNode = currentNode;\n      //     nextNodesQueue.push(neighbor)\n      //   }\n      }\n    }\n  \n};\n\nconst evaluateNextNode = (nextNode, currentNode, nextNodesQueue) => {\n  if (!nextNode.isVisited) {\n    nextNode.previousNode = currentNode;\n    nextNodesQueue.push(nextNode);\n  }\n};\n","import { changeNodeColor } from './gridActions'\n\nexport const changeNodeColorAsync = (nodeToChange, color) => async (dispatch, getState) => {\n    const { grid } = getState().grid\n    dispatch(changeNodeColor({ nodeToChange, color, grid }))\n}","import { AStar } from \"../../algorithms/WeightedAlgorithms/astar\";\nimport { dijkstra } from \"../../algorithms/WeightedAlgorithms/dijkstra\";\nimport { dfs } from \"../../algorithms/UnweightedAlgorithms/dfs\";\nimport { bfs } from \"../../algorithms/UnweightedAlgorithms/bfs\";\nimport { toggleRunning } from \"./gridUtils\";\nimport store from \"../../redux/store\";\nimport {getState} from \"./gridUtils\";\nimport { changeNodeColorAsync } from '../../redux/actions/asyncActions'\n\n\nexport const startApp = async (grid, algorithm, startNode, finishNode, speed) => {\n  const nodesInOrder = generateNodesPath(grid, algorithm, startNode, finishNode)\n  await animateNodesPath(nodesInOrder, finishNode, speed)\n}\n\nexport const generateNodesPath = (grid, algorithm, startNode, finishNode) => {\n  let visitedNodesInOrder;\n  if (algorithm.type === \"Dijkstra\") {\n      visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n  }\n  if (algorithm.type === \"A*\") {\n      visitedNodesInOrder = AStar(grid, startNode, finishNode);\n  }\n  if (algorithm.type === \"Breadth First Search\") {\n      visitedNodesInOrder = bfs(grid, startNode, finishNode);\n  }\n  if (algorithm.type === \"Depth First Search\") {\n      visitedNodesInOrder = dfs(grid, startNode, finishNode);\n  }  \n  return visitedNodesInOrder;\n}\n\nconst  animateNodesPath = async (visitedNodesInOrder, finishNode, speed) => {\n  for (let i = 0; i < visitedNodesInOrder.length; i++) {\n    let currentNode = visitedNodesInOrder[i]\n    if (!(currentNode.isStart || currentNode.isFinish || currentNode.isWall)) {\n      currentNode.isVisited = true;\n      store.dispatch(changeNodeColorAsync(currentNode, getNodeColor(\"VISITED\") ))\n    }\n    await pause(speed )\n  }\n  await pause(100 * speed )\n  finishSearching(finishNode)\n}\n\nconst finishSearching = async (finishNode) => {\n  const nodesInShortestPath = await getNodesInShortestPathOrder(finishNode);\n  await animateShortestPath(nodesInShortestPath)\n}\n\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called after the pathfinding methods.\nconst getNodesInShortestPathOrder = async (finishNode) => {\n  const nodesInShortestPath = [];\n  let currentNode = finishNode;\n  while (currentNode !== null ) {\n    nodesInShortestPath.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPath;\n};\n\nexport const animateShortestPath = async (nodesInShortestPathOrder) => {\n  for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n    const node = nodesInShortestPathOrder[i];\n    if (!node.isWall && !node.isStart && !node.isFinish) {\n      node.shortestPath = true;\n      store.dispatch(changeNodeColorAsync(node, getNodeColor(\"SHORTEST\") ))\n    }\n    await pause(40)\n  }\n  toggleRunning()\n};\n\nexport const getNodeColor = (color) => {\n  const nodeColors = getState().nodeTypes;\n  if (color === \"WALL\") return nodeColors[0].WALL;\n  if (color === \"VISITED\") return nodeColors[1].VISITED;\n  if (color === \"SHORTEST\") return nodeColors[2].SHORTEST;\n  if (color === \"START\") return nodeColors[3].START;\n  if (color === \"FINISH\") return nodeColors[4].FINISH;\n  if (color === \"NOCOLOR\") return nodeColors[5].NOCOLOR\n};\n\nexport const pause = async (speed) => {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve();\n    }, speed);\n  });\n};","import { getNeighbors } from './helperFunctions'\nexport const dfs = (grid, startNode, finishNode) => {\n  let visitedNodesInOrder = [];\n  let nextNodesStack = [startNode]; \n\n  while (nextNodesStack.length) {\n    const currentNode = nextNodesStack.pop();\n    \n    if (currentNode === finishNode) return visitedNodesInOrder;\n    if (\n      !currentNode.isWall &&\n      (currentNode.isStart || !currentNode.isVisited)\n    ) {\n      currentNode.isVisited = true;\n      visitedNodesInOrder.push(currentNode);\n\n      const { col, row } = currentNode;\n      const neighbors = getNeighbors(grid,row, col, 'dfs')\n      neighbors.forEach(neighbor => {\n        if (!neighbor.isVisited) {\n          neighbor.previousNode = currentNode;\n          nextNodesStack.push(neighbor)\n        }\n      })\n      // if (row > 0) {\n      //   nextNode = grid[row - 1][col];\n      //   if (!nextNode.isVisited) {\n      //     nextNode.previousNode = currentNode;\n      //     nextNodesStack.unshift(nextNode);\n      //   }\n      // }\n      // if (row < grid.length - 1) {\n      //   nextNode = grid[row + 1][col];\n      //   if (!nextNode.isVisited) {\n      //     nextNode.previousNode = currentNode;\n      //     nextNodesStack.unshift(nextNode);\n      //   }\n      // }\n      // if (col > 0) {\n      //   nextNode = grid[row][col - 1];\n      //   if (!nextNode.isVisited) {\n      //     nextNode.previousNode = currentNode;\n      //     nextNodesStack.unshift(nextNode);\n      //   }\n      // }\n      // if (col < grid[0].length - 1) {\n      //   nextNode = grid[row][col + 1];\n      //   if (!nextNode.isVisited) {\n      //     nextNode.previousNode = currentNode;\n      //     nextNodesStack.unshift(nextNode);\n      //   }\n      // }      \n    }\n  }\n  \n};\n\n","export const getNeighbors = (grid, row, col, algoName) => {\n    let nextNode;\n    let neighbors = []\n    if (grid[row - 1] && grid[row-1][col]) {\n      nextNode = grid[row - 1][col];\n      if (algoName === 'dfs') neighbors.unshift(nextNode)\n      else if (algoName === 'bfs') neighbors.push(nextNode)\n    }\n  \n    if (grid[row][col+1]) {\n      nextNode = grid[row][col+1];\n      if (algoName === 'dfs') neighbors.unshift(nextNode)\n      else if (algoName === 'bfs') neighbors.push(nextNode)\n    }\n  \n    if (grid[row+1] && grid[row+1][col]) {\n      nextNode = grid[row+1][col];\n      if (algoName === 'dfs') neighbors.unshift(nextNode)\n      else if (algoName === 'bfs') neighbors.push(nextNode)\n    }\n  \n    if (grid[row][col-1]) {\n      nextNode = grid[row][col-1]\n      neighbors.unshift(nextNode)\n  \n    }\n    return neighbors;\n  }","import store from \"../../redux/store\";\nimport { NodeClass } from \"../Node/NodeClass\";\nimport { getGrid, changeRunningToggle } from \"../../redux/actions/gridActions\";\nimport { getNodeColor } from \"./createAnimations\";\n\nexport const getState = () => {\n  return store.getState().grid;\n};\n\nexport const toggleRunning = () => {\n  store.dispatch(changeRunningToggle());\n};\n\nexport const generateGrid = (newGrid) => {\n  store.dispatch(getGrid({ grid: newGrid }));\n};\n\nexport const getStartAndFinishNodes = () => {\n  const {\n    START_NODE_ROW: startNodeRow,\n    START_NODE_COL: startNodeCol,\n    FINISH_NODE_ROW: finishNodeRow,\n    FINISH_NODE_COL: finishNodeCol,\n  } = getState();\n\n  return {\n    startNodeRow,\n    startNodeCol,\n    finishNodeRow,\n    finishNodeCol,\n  };\n};\n\nexport const getInitialGrid = (rowCount, colCount) => {\n  const { startNodeRow, startNodeCol, finishNodeRow, finishNodeCol } = getStartAndFinishNodes();\n  let initialGrid = [];\n  for (let row = 0; row < rowCount; row++) {\n    const currentRow = [];\n    for (let col = 0; col < colCount; col++) {\n      currentRow.push(\n        NodeClass(\n          row,\n          col,\n          startNodeRow,\n          startNodeCol,\n          finishNodeRow,\n          finishNodeCol\n        )\n      );\n    }\n    initialGrid.push(currentRow);\n  }\n  return initialGrid;\n};\n\nexport const getNewGridWithWallToggled = (row, col) => {\n  const { grid } = getState();\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  if (!node.isStart && !node.isFinish) {\n    let newNode = {\n      ...node,\n      isWall: !node.isWall,\n    };\n    newGrid[row][col] = newNode;\n    if (newGrid[row][col].isWall === true) {\n      newGrid[row][col].type = getNodeColor(\"WALL\");\n    } else {\n      newGrid[row][col].type = getNodeColor(\"NOCOLOR\");\n    }\n  }\n  return newGrid;\n};\n\n","import { getState, getStartAndFinishNodes, generateGrid } from \"./gridUtils\";\nimport { NodeClass } from \"../Node/NodeClass\";\nimport { getNodeColor } from \"./createAnimations\";\n\nexport const isGridClear = (grid) => {\n  for (const row of grid) {\n    for (const node of row) {\n      if (!(node.isVisited || !node.shortestPath)) return false;\n    }\n  }\n  return true;\n};\n\nexport const resetGrid = (gridState) => {\n  if (!getState().isRunning) {\n    console.log(\"reset grid\")\n    const { ROW_COUNT, COLUMN_COUNT } = getState();\n    let currentGrid = JSON.parse(JSON.stringify(gridState));\n    const { startNodeRow, startNodeCol, finishNodeRow, finishNodeCol } = getStartAndFinishNodes();\n\n    let newGrid = [];\n    for (let row = 0; row < ROW_COUNT; row++) {\n      const currentRow = [];\n      for (let col = 0; col < COLUMN_COUNT; col++) {\n        let newNode = NodeClass(\n          row,\n          col,\n          startNodeRow,\n          startNodeCol,\n          finishNodeRow,\n          finishNodeCol\n        );\n        newNode.isWall = currentGrid[row][col].isWall;\n        currentRow.push(newNode);\n        if (newNode.isWall) {\n          newNode.type = getNodeColor(\"WALL\");\n        }\n      }\n      newGrid.push(currentRow);\n    }\n    return newGrid;\n  }\n};\n\nexport const clearWalls = (grid) => {\n  const { isRunning } = getState();\n  let newGrid = grid.slice()\n  if (!isRunning) {\n    for (const row of newGrid) {\n      for (const node of row) {\n        if (node.isWall === true) {\n          node.isWall = false;\n          node.type = getNodeColor(\"NOCOLOR\");\n        }\n      }\n    }\n    return newGrid;\n  }\n};\n\nexport const clearBoard = (grid) => {\n  console.log(\"clearBoard\")\n  generateGrid(resetGrid(grid));\n  generateGrid(clearWalls(grid));\n};\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { useEffect, useState, useCallback } from \"react\";\nimport { getGrid } from \"../../redux/actions/gridActions\";\nimport {\n  selectRunning,\n  selectRowCount,\n  selectColCount,\n} from \"../../redux/actions/selectors\";\nimport { getInitialGrid } from \"../utils/gridUtils\";\nimport { getNodeColor } from \"../utils/createAnimations\";\n\nexport const useMaze = () => {\n  const dispatch = useDispatch();\n  const isRunning = useSelector(selectRunning);\n  const rowCountDesktop = useSelector(selectRowCount);\n  const colCountDesktop = useSelector(selectColCount);\n\n  const [mazeBtnIsClicked, setMazeBtn] = useState(false);\n\n  const handleMazeBtn = useCallback(() => {\n    if (!isRunning) {\n      setMazeBtn(true);\n      const newGrid = createMaze(rowCountDesktop, colCountDesktop);\n      dispatch(getGrid({ grid: newGrid }));\n    }\n  }, [dispatch]);\n\n  useEffect(() => {\n    console.log(\"use maze btn \");\n    if (mazeBtnIsClicked) setMazeBtn(false);\n  }, [mazeBtnIsClicked]);\n\n  return {\n    mazeBtnIsClicked,\n    setMazeBtn,\n    handleMazeBtn,\n  };\n};\n\nconst createMaze = (rowCountDesktop, colCountDesktop) => {\n  let numsOfRows = rowCountDesktop;\n  let numsOfCols = colCountDesktop;\n  let prefix = 10;\n  let wallNodes = [];\n\n  let grid = getInitialGrid(numsOfRows, numsOfCols);\n  for (let i = 0; i < Math.floor(prefix * numsOfRows); i++) {\n    const randomRow = Math.floor(Math.random() * (numsOfRows - 1));\n    const randomCol = Math.floor(Math.random() * (numsOfCols - 1));\n    let randomNode = grid[randomRow][randomCol];\n    if (!randomNode.isStart && !randomNode.isFinish) {\n      randomNode.isWall = true;\n      randomNode.type = getNodeColor(\"WALL\");\n      wallNodes.push(randomNode);\n    }\n  }\n  return grid;\n};\n","import { useSelector  } from \"react-redux\";\nimport FlagSVG from \"./../assets/images/FlagSVG\";\nimport AlgoMenu from \"./AlgoMenu\";\nimport SpeedMenu from \"./SpeedMenu\";\nimport {\n  selectAlgo,\n  selectAlgoOptions,\n  selectSpeed,\n  selectSpeedOptions,\n} from \"../redux/actions/selectors\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlay } from \"@fortawesome/free-solid-svg-icons\";\nimport { useAnimations } from './customHooks/useAnimations'\nimport { useMaze } from './customHooks/useMaze';\nimport { useReset } from \"./customHooks/useReset\"\nimport { useClearWalls } from \"./customHooks/useClearWalls\";\n\nconst NavBar = ({ grid }) => {\n  const currentAlgo = useSelector(selectAlgo);\n  const algoOptions = useSelector(selectAlgoOptions);\n  const speed = useSelector(selectSpeed);\n  const speedOptions = useSelector(selectSpeedOptions);\n  const handlePlayBtn = useAnimations();\n  const { handleMazeBtn } = useMaze();\n  const { handleClearGridBtn } = useReset()\n  const { handleClearWallsBtn } = useClearWalls()\n  return (\n    <nav\n      className=\"navbar navbar-expand-md navbar-dark sticky-top\"\n      id=\"navContainer\"\n      style={{ backgroundColor: \"#1B5E20\" }}\n    >\n      <a\n        className=\"navbar-brand mx-3\"\n        href=\"/\"\n        onClick={(e) => {\n          e.preventDefault();\n          window.scrollTo(0, 0);\n        }}\n      >\n        {\" \"}\n        <FlagSVG color={\"white\"} size={\"20\"} />\n        <b style={{ padding: \"10px\" }}>PathFinder</b>\n      </a>\n\n      <button\n        className=\"navbar-toggler me-2\"\n        id=\"navbar-toggler\"\n        type=\"button\"\n        data-bs-toggle=\"collapse\"\n        data-bs-target=\"#navbarCollapse\"\n        aria-controls=\"navbarCollapse\"\n        aria-expanded=\"false\"\n        aria-label=\"Toggle navigation\"\n      >\n        <span className=\"navbar-toggler-icon\"></span>\n      </button>\n\n      <div className=\"collapse navbar-collapse p-1\" id=\"navbarCollapse\">\n        <ul className=\"navbar-nav mr-auto mt-2 mt-lg-0\">\n          \n          <li className=\"nav-item active m-2\"> \n            <button\n                type=\"button\"\n                className=\"btn btn-success\"\n                onClick={() => {\n                  handleMazeBtn()}\n                }>\n                Create Maze\n              </button>\n          </li>\n          \n          <li className=\"nav-item active m-2\">\n            <AlgoMenu currentAlgo={currentAlgo} algoOptions={algoOptions} />\n          </li>\n\n          <li className=\"nav-item active m-2\">\n            <SpeedMenu speed={speed} speedOptions={speedOptions} />\n          </li>\n\n          <li className=\"nav-item  m-2\">\n            <button\n              type=\"button\"\n              className=\"btn btn-danger\"\n              onClick={() => {\n                if (currentAlgo === null || speed === null) {\n                  alert(\"Please choose algorithm and/or speed\");\n              } else handlePlayBtn(grid) }}\n            >\n              {\" \"}\n              <FontAwesomeIcon icon={faPlay} size=\"lg\" />\n            </button>\n          </li>\n\n          <li className=\"nav-item m-2\">\n            <button\n              type=\"button\"\n              className=\"btn btn-danger\"\n              onClick={() => \n                handleClearGridBtn(grid)\n              }\n            >\n              Clear Grid\n            </button>\n          </li>\n\n          <li className=\"nav-item m-2\">\n            <button\n              type=\"button\"\n              className=\"btn btn-danger\"\n              onClick={() => handleClearWallsBtn(grid) }\n            >\n              Clear Walls\n            </button>\n          </li>\n        </ul>\n       \n      </div>\n    </nav>\n  );\n};\n\nexport default NavBar;\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { useCallback, useEffect } from \"react\";\nimport { changeRunningToggle, getGrid } from \"../../redux/actions/gridActions\";\nimport {\n  selectRunning,\n  selectAlgo,\n  selectSpeed,\n  selectGrid,\n  selectAlgoOptions,\n  selectStartNodeRow,\n  selectStartNodeCol,\n  selectFinishNodeRow,\n  selectFinishNodeCol,\n} from \"../../redux/actions/selectors\";\nimport { resetGrid } from \"../utils/boardControls\";\nimport { startApp } from \"../utils/createAnimations\";\n\nexport const useAnimations = () => {\n  const dispatch = useDispatch();\n  const isRunning = useSelector(selectRunning);\n  const grid = useSelector(selectGrid);\n  const currentAlgo = useSelector(selectAlgo);\n  const speed = useSelector(selectSpeed);\n  const algoOptions = useSelector(selectAlgoOptions);\n  const START_NODE_ROW = useSelector(selectStartNodeRow);\n  const START_NODE_COL = useSelector(selectStartNodeCol);\n  const FINISH_NODE_ROW = useSelector(selectFinishNodeRow);\n  const FINISH_NODE_COL = useSelector(selectFinishNodeCol);\n\n  const handlePlayBtn = useCallback((grid) => {\n    if (!isRunning) {\n      const emptyGrid = resetGrid(grid)\n      dispatch(getGrid({grid: emptyGrid }))\n      dispatch(changeRunningToggle());\n    }\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (isRunning) {\n      const startNode = grid[START_NODE_ROW][START_NODE_COL];\n      const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n      const algorithm = algoOptions.find((algo) => algo.id === currentAlgo);\n      const gridClone = [...grid]\n      startApp(gridClone, algorithm, startNode, finishNode, speed);\n    }\n  }, [isRunning]);\n\n  return handlePlayBtn;\n};\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { useEffect, useState, useCallback } from \"react\";\nimport { getGrid } from \"../../redux/actions/gridActions\";\nimport { selectRunning } from \"../../redux/actions/selectors\";\nimport { resetGrid } from \"../utils/boardControls\";\n\nexport const useReset = () => {\n  const dispatch = useDispatch();\n  const isRunning = useSelector(selectRunning);\n  const [clearBtn, setClearGridBtn] = useState(false);\n\n  const handleClearGridBtn = useCallback(\n    (grid) => {\n      if (!isRunning) {\n        setClearGridBtn(true);\n        const emptyGrid = resetGrid(grid);\n        dispatch(getGrid({ grid: emptyGrid }));\n      }\n    },\n    [dispatch]\n  );\n\n  useEffect(() => {\n    console.log(\"usereset \");\n    if (clearBtn) setClearGridBtn(false);\n  }, [clearBtn]);\n\n  return {\n    clearBtn,\n    setClearGridBtn,\n    handleClearGridBtn,\n  };\n};\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { useEffect, useState, useCallback } from \"react\";\nimport { getGrid } from \"../../redux/actions/gridActions\";\nimport { selectRunning } from \"../../redux/actions/selectors\";\nimport { clearWalls } from \"../utils/boardControls\";\n\nexport const useClearWalls = () => {\n  const dispatch = useDispatch();\n  const isRunning = useSelector(selectRunning);\n  const [clearWallsBtn, setClearWallsBtn] = useState(false);\n\n  const handleClearWallsBtn = useCallback((grid) => {\n    if (!isRunning) {\n      setClearWallsBtn(true)\n      const gridWithNoWalls = clearWalls(grid)\n      dispatch(getGrid({grid: gridWithNoWalls }))\n    }\n  }, [dispatch]);\n\n  useEffect(() => {\n\n    console.log(\"use clear walls \")\n    if (clearWallsBtn) setClearWallsBtn(false);\n\n  }, [clearWallsBtn]);\n\n  return {\n    clearWallsBtn,\n    setClearWallsBtn,\n    handleClearWallsBtn\n  };\n};\n","import store from \"../../redux/store\";\nimport {\n  getNewGridWithWallToggled,\n  getInitialGrid,\n  generateGrid,\n  getState,\n} from \"./gridUtils\";\nimport { isGridClear } from \"./boardControls\";\nimport {\n  handleMouseUp,\n  mouseUpAtStartNode,\n  mouseUpAtFinishNode,\n  mouseLeaveAtStartNode,\n  mouseLeaveAtFinishNode,\n  mouseLeaveAtWallNode,\n  mouseDownAtStartNode,\n  mouseDownAtFinishNode,\n  mouseDownAtWallNode,\n  mouseEnterAtStartNode,\n  mouseEnterAtFinishNode,\n  mouseEnterAtCurr,\n} from \"../../redux/actions/gridActions\";\nimport { changeNodeColorAsync } from '../../redux/actions/asyncActions'\nimport { getNodeColor } from './createAnimations'\n/******************** Handle mouse events ********************/\n\nexport const handleMouseLeaveEvent = () => {\n\n  const { ROW_COUNT, COLUMN_COUNT } = getState();\n  const { currNodeisStartNode, currNodeisFinishNode, currNodeisWallNode } = getState();\n  if (currNodeisStartNode) {\n    store.dispatch(mouseLeaveAtStartNode());\n  } else if (currNodeisFinishNode) {\n    store.dispatch(mouseLeaveAtFinishNode());\n  } else if (currNodeisWallNode) {\n    store.dispatch(mouseLeaveAtWallNode());\n    getInitialGrid(ROW_COUNT, COLUMN_COUNT);\n  }\n};\n\nexport const handleMouseUpEvent = (row, col) => {\n\n  const { isRunning, grid, currNodeisStartNode, currNodeisFinishNode } = getState();\n\n  if (!isRunning) {\n    const { ROW_COUNT, COLUMN_COUNT } = getState();\n    store.dispatch(handleMouseUp());\n    const releasedNode = grid[row][col]\n\n    if (currNodeisStartNode) {\n      store.dispatch(mouseUpAtStartNode({ START_NODE_ROW: row, START_NODE_COL: col }));\n      store.dispatch(changeNodeColorAsync(releasedNode, getNodeColor(\"START\")))\n\n    } else if (currNodeisFinishNode) {\n      store.dispatch( mouseUpAtFinishNode({ FINISH_NODE_ROW: row, FINISH_NODE_COL: col }) );\n      store.dispatch(changeNodeColorAsync(releasedNode, getNodeColor(\"FINISH\")))\n\n    }\n    getInitialGrid(ROW_COUNT, COLUMN_COUNT);\n  }\n};\n\nexport const handleMouseDownEvent = (row, col) => {\n\n  const { isRunning, grid } = getState();\n  if (!isRunning) {\n    \n    if (isGridClear(grid)) {\n      const pressedNode = grid[row][col]\n      if (pressedNode.isStart) {\n        store.dispatch(mouseDownAtStartNode({ currRow: row, currCol: col }));\n\n      } else if (pressedNode.isFinish) {\n        store.dispatch(mouseDownAtFinishNode({ currRow: row, currCol: col }));\n\n      } else {\n        const newGrid = getNewGridWithWallToggled(row, col);\n        store.dispatch(mouseDownAtWallNode({\n            grid: newGrid,\n            currRow: row,\n            currCol: col,\n          }));\n      }\n    }\n  } \n};\n\nexport const handleMouseEnterEvent = (row, col) => {\n\n  const {\n    isRunning,\n    mouseIsPressed,\n    currNodeisWallNode,\n    currNodeisStartNode,\n    currNodeisFinishNode,\n    grid,\n    currRow,\n    currCol,\n  } = getState();\n\n  if (!isRunning) {\n    if (mouseIsPressed) {\n      let enteredNode = grid[row][col]\n      \n      if (currNodeisStartNode) {\n        \n        if (enteredNode.isWall === false) {\n          let prevStartNode = grid[currRow][currCol];\n          prevStartNode.isStart = false;\n          store.dispatch(changeNodeColorAsync(prevStartNode, getNodeColor(\"NOCOLOR\")))\n          store.dispatch(mouseEnterAtCurr({ currRow: row, currCol: col }));\n          \n          enteredNode.isStart = true;\n          store.dispatch(changeNodeColorAsync(enteredNode, getNodeColor(\"START\")))\n        }\n        store.dispatch(mouseEnterAtStartNode({ START_NODE_ROW: row, START_NODE_COL: col }));\n        store.dispatch(changeNodeColorAsync(enteredNode, getNodeColor(\"START\")))\n\n      } else if (currNodeisFinishNode) {\n\n        if (enteredNode.isWall === false) {\n          let prevFinishNode = grid[currRow][currCol];\n          prevFinishNode.isFinish = false;\n          store.dispatch(mouseEnterAtCurr({ currRow: row, currCol: col }));\n          store.dispatch(changeNodeColorAsync(prevFinishNode, getNodeColor(\"NOCOLOR\")))\n\n          enteredNode.isFinish = true;\n          store.dispatch(changeNodeColorAsync(enteredNode, getNodeColor(\"FINISH\")))\n        }\n        store.dispatch( mouseEnterAtFinishNode({ FINISH_NODE_ROW: row, FINISH_NODE_COL: col }));\n        store.dispatch(changeNodeColorAsync(enteredNode, getNodeColor(\"FINISH\")))\n\n      } else if (currNodeisWallNode) {\n\n        const newGrid = getNewGridWithWallToggled(row, col);\n        generateGrid(newGrid);\n      }\n    }\n  }\n};\n","import './Node.css';\nimport React from \"react\";\n\nconst Node = ({\n  id,\n  col,\n  row,\n  type,\n  onMouseDown,\n  onMouseEnter,\n  onMouseUp,\n}) => {\n  \n  const getNodeColor = (nodeType) => {\n    if (nodeType === 0) return \"wall\"\n    if (nodeType === 1 ) return \"visited\"\n    if (nodeType === 2 ) return \"shortest-path\"\n    if (nodeType === 3 ) return \"start\"\n    if (nodeType === 4) return \"finish\"\n    else return \" \"\n  }\n\n  return (\n    <td\n      key={id}\n      id={`node-${row}-${col}`}\n      className={`node ${getNodeColor(type)}`}\n      onMouseDown={() => onMouseDown(row, col)}\n      onMouseEnter={() => onMouseEnter(row, col)}\n      onMouseUp={() => onMouseUp(row, col)}\n    ></td>\n  );\n};\n\nexport default Node;\n","import {\n  handleMouseLeaveEvent,\n  handleMouseUpEvent,\n  handleMouseDownEvent,\n  handleMouseEnterEvent,\n} from \"./utils/mouseHandlers\";\nimport Node from './Node/Node'\n\nconst Grid = ({ grid }) => {\n\n  const addRow = ({ row, rowIdx }) => {\n    return (\n        <tr key={rowIdx}>\n            {row.map((node, nodeIdx) => {\n                const { id, col, row, type } = node\n                return (<Node \n                    id={id}\n                    col={col}\n                    row={row}\n                    type={type}\n                    onMouseDown={handleMouseDownEvent}\n                    onMouseEnter={handleMouseEnterEvent}\n                    onMouseUp={handleMouseUpEvent} />)\n            })}\n        </tr>\n    )\n}\n\nconst renderTable = (aGrid) => {\n    const gridClone = JSON.parse(JSON.stringify(aGrid));\n    return (\n        <table \n        className=\"grid-container table-responsive\"\n        onMouseLeave={() => handleMouseLeaveEvent()} >\n            <thead> </thead>\n            <tbody>\n                {gridClone.map((row, rowIdx) => {\n                    return addRow({row, rowIdx})\n                    })\n                }\n            </tbody>\n        </table>\n      )\n}\n\nreturn (\n    <>\n        {grid.length > 0 ? (\n            <div className=\"container\">\n                {renderTable(grid)} \n            </div>\n        ) : null }\n    </>\n)\n};\n\nexport default Grid;\n","import React from \"react\";\nimport FlagSVG from \"../../assets/images/FlagSVG\";\n\nexport const WelcomeSlide = () => {\n  return (\n    <div\n      className=\"modal fade\"\n      id=\"modalToggle0\"\n      aria-hidden=\"true\"\n      aria-labelledby=\"exampleModalToggleLabel\"\n    >\n      <div className=\"modal-dialog modal-dialog-centered\">\n        <div className=\"modal-content \">\n          <div className=\"modal-header\">\n            <h4 className=\"modal-title \" id=\"exampleModalToggleLabel\">\n              Welcome to Pathfinder {\" \"}\n              <FlagSVG color={\"dark\"} size={\"16\"} />\n            </h4>\n            <button\n              type=\"button\"\n              className=\"btn-close\"\n              data-bs-dismiss=\"modal\"\n              aria-label=\"Close\"\n            ></button>\n          </div>\n          <div className=\"modal-body\">\n            <p className=\"text-start\">\n              This tutorial will walk you through the main features of\n              this Pathfinding Visualizer application. \n              If you want to dive right in, please click <b>Skip Tutorial</b> button. \n              Otherwise, keep pressing  <b>Next</b>!\n            </p>\n            \n          </div>\n\n          <div className=\"modal-footer\">\n            <button className=\"btn btn-danger\" data-bs-dismiss=\"modal\">\n              Skip Tutorial\n            </button>\n\n            <button\n              className=\"btn btn-primary\"\n              data-bs-target=\"#modalToggle1\"\n              data-bs-toggle=\"modal\"\n              data-bs-dismiss=\"modal\"\n            >\n              Next\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport const FirstSlide = () => {\n  return (\n    <div\n      className=\"modal fade\"\n      id=\"modalToggle1\"\n      aria-hidden=\"true\"\n      aria-labelledby=\"exampleModalToggleLabel\"\n    >\n      <div className=\"modal-dialog modal-dialog-centered\">\n        <div className=\"modal-content \">\n          <div className=\"modal-header\">\n            <h5 className=\"modal-title \" id=\"exampleModalToggleLabel\">\n              What is a Pathfinding Algorithm?\n            </h5>\n            <button\n              type=\"button\"\n              className=\"btn-close\"\n              data-bs-dismiss=\"modal\"\n              aria-label=\"Close\"\n            ></button>\n          </div>\n          <div className=\"modal-body\">\n            <p className=\"text-start\">\n              {\" \"}\n              <a href=\"https://en.wikipedia.org/wiki/Pathfinding\">\n                <b>Pathfinding Algorithm</b>{\" \"}\n              </a>\n              is the plotting of the shortest route between two points. At its\n              core, a pathfinding method searches a graph by starting at one\n              vertex and exploring adjacent nodes until the destination node is\n              reached, generally with the intent of finding the cheapest route.\n            </p>\n          </div>\n\n          <div className=\"modal-footer\">\n            <button\n              className=\"btn btn-primary\"\n              data-bs-target=\"#modalToggle2\"\n              data-bs-toggle=\"modal\"\n              data-bs-dismiss=\"modal\"\n            >\n              Next\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","export default __webpack_public_path__ + \"static/media/menudemo.9e05c07c.gif\";","import React from \"react\";\nimport menudemo from \"../../assets/gif/menudemo.gif\";\nexport const SecondSlide = () => {\n  return (\n    <div\n      className=\"modal fade\"\n      id=\"modalToggle2\"\n      aria-hidden=\"true\"\n      aria-labelledby=\"exampleModalToggleLabel2\"\n    >\n      <div className=\"modal-dialog modal-dialog-centered\">\n        <div className=\"modal-content\">\n          <div className=\"modal-header\">\n            <h5 className=\"modal-title\" id=\"exampleModalToggleLabel2\">\n              Pick An Algorithm\n            </h5>\n            <button\n              type=\"button\"\n              className=\"btn-close\"\n              data-bs-dismiss=\"modal\"\n              aria-label=\"Close\"\n            ></button>\n          </div>\n          <div className=\"modal-body\">\n            <p className=\"text-start\">\n              Choose an algorithm and speed from the drop-down menu. Note that\n              some algorithms are unweighted, while others are weighted.\n              Unweighted algorithms do not take turns or weight nodes into\n              account, whereas weighted ones do. Additionally, not all\n              algorithms guarantee the shortest path.\n            </p>\n            <img\n              className=\"img-fluid\"\n              src={menudemo}\n              alt=\"pick algo and speed\"\n            />\n          </div>\n          <div className=\"modal-footer\">\n            <button\n              className=\"btn btn-primary\"\n              data-bs-target=\"#modalToggle1\"\n              data-bs-toggle=\"modal\"\n              data-bs-dismiss=\"modal\"\n            >\n              Back\n            </button>\n            <button\n              className=\"btn btn-primary\"\n              data-bs-target=\"#modalToggle3\"\n              data-bs-toggle=\"modal\"\n              data-bs-dismiss=\"modal\"\n            >\n              Next\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","export default __webpack_public_path__ + \"static/media/movenode.3704e404.gif\";","import React from \"react\";\nimport movenode from \"../../assets/gif/movenode.gif\";\n\nexport const ThirdSlide = () => {\n  return (\n    <div\n      className=\"modal fade\"\n      id=\"modalToggle3\"\n      aria-hidden=\"true\"\n      aria-labelledby=\"exampleModalToggleLabel2\"\n    >\n      <div className=\"modal-dialog modal-dialog-centered\">\n        <div className=\"modal-content\">\n          <div className=\"modal-header\">\n            <h5 className=\"modal-title\" id=\"exampleModalToggleLabel2\">\n              Start Node and Goal Node\n            </h5>\n            <button\n              type=\"button\"\n              className=\"btn-close\"\n              data-bs-dismiss=\"modal\"\n              aria-label=\"Close\"\n            ></button>\n          </div>\n          <div className=\"modal-body\">\n            <div>\n              <p className=\"text-start\">\n              Move start node and goal node anywhere on the grid.\n              </p>\n              <img className=\"img-fluid\" src={movenode} alt=\"move nodes\" />\n            </div>\n            \n          </div>\n          <div className=\"modal-footer\">\n            <button\n              className=\"btn btn-primary\"\n              data-bs-target=\"#modalToggle2\"\n              data-bs-toggle=\"modal\"\n              data-bs-dismiss=\"modal\"\n            >\n              Back\n            </button>\n            <button\n              className=\"btn btn-primary\"\n              data-bs-target=\"#modalToggle4\"\n              data-bs-toggle=\"modal\"\n              data-bs-dismiss=\"modal\"\n            >\n              Next\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","export default __webpack_public_path__ + \"static/media/walldemo.b8075c76.gif\";","import React from \"react\";\nimport walldemo from \"../../assets/gif/walldemo.gif\";\n\nexport const FourthSlide = () => {\n  return (\n    <div\n      className=\"modal fade\"\n      id=\"modalToggle4\"\n      aria-hidden=\"true\"\n      aria-labelledby=\"exampleModalToggleLabel2\"\n    >\n      <div className=\"modal-dialog modal-dialog-centered\">\n        <div className=\"modal-content\">\n          <div className=\"modal-header\">\n            <h5 className=\"modal-title\" id=\"exampleModalToggleLabel2\">\n              Add Walls \n            </h5>\n            <button\n              type=\"button\"\n              className=\"btn-close\"\n              data-bs-dismiss=\"modal\"\n              aria-label=\"Close\"\n            ></button>\n          </div>\n\n          <div className=\"modal-body\">\n            <div>\n              <p className=\"text-start\">\n                Move cursor anywhere on the grid to add walls. Walls are\n                impenetrable, meaning that a path cannot cross through them.\n              </p>\n              <img className=\"img-fluid\" src={walldemo} alt=\"create walls\" />\n            </div>\n            <br></br>\n          </div>\n\n          <div className=\"modal-footer\">\n            <button\n              className=\"btn btn-primary\"\n              data-bs-target=\"#modalToggle3\"\n              data-bs-toggle=\"modal\"\n              data-bs-dismiss=\"modal\"\n            >\n              Back\n            </button>\n            <button\n              className=\"btn btn-primary\"\n              data-bs-target=\"#modalToggle5\"\n              data-bs-toggle=\"modal\"\n              data-bs-dismiss=\"modal\"\n            >\n              Next\n            </button>\n          </div>\n          \n        </div>\n      </div>\n    </div>\n  );\n};\n","export default __webpack_public_path__ + \"static/media/mazedemo.e8ca0a7f.gif\";","import React from \"react\";\nimport mazedemo from \"../../assets/gif/mazedemo.gif\";\n\nexport const FifthSlide = () => {\n  return (\n    <div\n      className=\"modal fade\"\n      id=\"modalToggle5\"\n      aria-hidden=\"true\"\n      aria-labelledby=\"exampleModalToggleLabel2\"\n    >\n      <div className=\"modal-dialog modal-dialog-centered\">\n        <div className=\"modal-content\">\n          <div className=\"modal-header\">\n            <h5 className=\"modal-title\" id=\"exampleModalToggleLabel2\">\n              Generate Maze\n            </h5>\n            <button\n              type=\"button\"\n              className=\"btn-close\"\n              data-bs-dismiss=\"modal\"\n              aria-label=\"Close\"\n            ></button>\n          </div>\n          <div className=\"modal-body\">\n            <div>\n              <p className=\"text-start\">\n              Generate mazes with \"Create Maze\" button.\n              </p>\n              <img className=\"img-fluid\" src={mazedemo} alt=\"create mazes\" />\n            </div>\n            <br></br>\n          </div>\n\n          <div className=\"modal-footer\">\n            <button\n              className=\"btn btn-primary\"\n              data-bs-target=\"#modalToggle4\"\n              data-bs-toggle=\"modal\"\n              data-bs-dismiss=\"modal\"\n            >\n              Back\n            </button>\n            <button\n              className=\"btn btn-danger\"\n              data-bs-dismiss=\"modal\"\n            >Close</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { WelcomeSlide } from './WelcomeSlide'\nimport { FirstSlide } from \"./FirstSlide\";\nimport { SecondSlide } from \"./SecondSlide\";\nimport { ThirdSlide } from \"./ThirdSlide\";\nimport { FourthSlide } from \"./FourthSlide\";\nimport { FifthSlide } from \"./FifthSlide\";\n\nexport const ModalBox = () => {\n\n  return (\n    <div>\n      <WelcomeSlide />\n      <FirstSlide />\n      <SecondSlide />\n      <ThirdSlide />\n      <FourthSlide />\n      <FifthSlide />\n    </div>\n  );\n};\n","\nexport const AlgoExplained = ({ currentAlgo, algoOptions }) => {\n    const findAlgoName = () => {\n        if (currentAlgo === null) return \"Not Selected\"\n        else return algoOptions.find((algo) => algo.id === currentAlgo).type;\n    }\n    const findAlgo = () => {\n        let url;\n        if (findAlgoName() === \"Dijkstra\") url = \"https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm\"\n        else if (findAlgoName() === \"A*\") url = \"https://en.wikipedia.org/wiki/A*_search_algorithm\"\n        else if (findAlgoName() === \"Breadth First Search\") url=\"https://en.wikipedia.org/wiki/Breadth-first_search\"\n        else if (findAlgoName() === \"Depth First Search\") url = \"https://en.wikipedia.org/wiki/Depth-first_search\"\n        else url = \"#\"\n        return url;\n    }\n    return (\n        <a href={findAlgo()} target=\"_blank\" rel=\"noopener noreferrer\" className=\"link-danger\">\n            {findAlgoName()}\n        </a>\n    )\n}\n\n","import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport MainText from \"./MainText/MainText\";\nimport NavBar from \"./NavBar\";\nimport Grid from \"./Grid\";\nimport \"./PathFinder.css\";\nimport { getGrid } from \"../redux/actions/gridActions\";\nimport { getInitialGrid } from \"./utils/gridUtils\";\nimport { ModalBox } from \"./ModalBox/ModalBoxContainer\";\nimport {\n  selectRowCount,\n  selectColCount,\n  selectAlgo,\n  selectAlgoOptions,\n  selectGrid,\n} from \"../redux/actions/selectors\";\nimport { AlgoExplained } from \"./AlgoExplained\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faExternalLinkAlt } from \"@fortawesome/free-solid-svg-icons\";\n\nconst PathFinder = () => {\n  const dispatch = useDispatch();\n  const grid = useSelector(selectGrid);\n  const rowCount = useSelector(selectRowCount);\n  const colCount = useSelector(selectColCount);\n  const currentAlgo = useSelector(selectAlgo);\n  const algoOptions = useSelector(selectAlgoOptions);\n\n  let initGrid = getInitialGrid(rowCount, colCount);\n  useEffect(() => {\n    console.log(\"first render\");\n    dispatch(getGrid({ grid: initGrid }));\n    document.querySelector('[data-bs-target=\"#modalToggle0\"]').click();\n  }, []);\n\n  return (\n    <div className=\"content\">\n      <ModalBox />\n      {grid.length > 0 ? <NavBar grid={grid} /> : null}\n      <div className=\"mt-3 custom-collapse\">\n        <ul className=\"list-group collapse\" id=\"buttons-container\">\n          <li className=\"m-2\">\n            <button\n              className=\"btn btn-outline-secondary \"\n              id=\"tutorialBtn\"\n              data-bs-toggle=\"modal\"\n              data-bs-target=\"#modalToggle0\"\n            >\n              Walk me through the app\n            </button>\n            <ModalBox />\n          </li>\n\n          <li className=\"m-2\">\n            <button\n              className=\"btn btn-outline-secondary \"\n              id=\"algoExplainedBtn\"\n            >\n              \n              <b>\n                <AlgoExplained\n                  currentAlgo={currentAlgo}\n                  algoOptions={algoOptions}\n                />\n              </b>{\" \"}\n              algorithm {\" \"}\n              <FontAwesomeIcon icon={faExternalLinkAlt} />\n            </button>\n          </li>\n        </ul>\n      </div>\n      {grid.length > 0 ? <Grid grid={grid} /> : null}\n      <MainText />\n    </div>\n  );\n};\n\nexport default PathFinder;\n","import { faGithub, faLinkedin } from \"@fortawesome/free-brands-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\nconst Footer = () => {\n  return (\n    <footer\n      className=\"text-center mt-4 position-absolute\"\n      style={{ backgroundColor: \"rgba(0, 0, 0, 0.05)\" }}\n    >\n      <div className=\"container p-3 pb-2\">\n        <section>\n          <a\n            className=\"btn btn-outline-dark btn-floating m-1\"\n            href=\"https://github.com/tttn13\"\n            role=\"button\"\n            target=\"_blank\" rel=\"noopener noreferrer\"\n          >\n            <FontAwesomeIcon icon={faGithub} />\n          </a>\n\n          <a\n            className=\"btn btn-outline-dark btn-floating m-1\"\n            href=\"#!\"\n            role=\"button\"\n            target=\"_blank\" rel=\"noopener noreferrer\"\n          >\n            <FontAwesomeIcon icon={faUser} />\n          </a>\n\n          <a\n            className=\"btn btn-outline-dark btn-floating m-1\"\n            href=\"https://www.linkedin.com/in/thi-nguyen-1310/\"\n            role=\"button\"\n            target=\"_blank\" rel=\"noopener noreferrer\"\n          >\n            <FontAwesomeIcon icon={faLinkedin} />\n          </a>\n        </section>\n      </div>\n      <div className=\"text-center\" id=\"footerText\">   \n        &copy; {new Date().getFullYear()} Copyright: Thi Nguyen{\" \"}\n        <span style={{ color: \"#e25555\" }}>&#9829;</span>\n        <a\n          className=\"nav-link\"\n          style={{ fontWeight: \"600\" }}\n          href=\"https://github.com/tttn13/pathfinder-visualizer\"\n          target=\"_blank\" rel=\"noopener noreferrer\"\n        >\n          Source Code\n        </a>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import PathFinder from \"./components/PathFinder\";\nimport \"./App.css\";\nimport Footer from \"./components/Footer\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathFinder />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n    </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}